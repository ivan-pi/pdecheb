C    ----- NEW VERSION --------------------
C   PDECHEB DISCRETISATION MODULE
C   ****************************
C   THIS MODULE DISCRETISES MIXED SYSTEMS OF PARTIAL DIFFERENTIAL
C   EQUATIONS IN ONE SPACE VARIABLE AND ORDINARY DIFFERENTIAL EQUATIONS.
C   THIS IS THE MARK 1 VERSION OF PDECHEB 10TH AUGUST 1987 AS WRITTEN BY
C    DR MARTIN BERZINS
C      DEPARTMENT OF COMPUTER STUDIES
C       THE UNIVERSITY
C        LEEDS LS2 9JT
C   ALL RIGHTS RETAINED.
C   ( DOCUMENTATION MODIFIED ON 25/2/90 )
C   THE CLASS OF EQUATIONS THAT CAN BE HANDLED IS GIVEN BY
C
C                                    .
C   Q (X,T, U, U  ,  U  , U    , V , V )
C    I      -  - X   -T   - XT   -   -
C
C                          -M   M                               .
C                      =  X   (X  R (X,T, U, U  , U   , U  , V, V ))
C                                  I      -  -X   - XT  -T   -  -   X
C     WHERE
C           U = ( U  , ... , U ) TRANSPOSE  AND  I = 1,... , NPDE.
C           -       1         NPDE
C
C     THE P.D.E. FLUX FUNCTION R(.......) IS ASSUMED TO BE CONTINUOUS
C     W.R.T. THE SPACE VARIABLE R BUT THE FUNCTION  Q(.... ) IS
C     ALLOWED TO BE ONLY PIECEWISE CONTINUOUS PROVIDED THAT THE
C     DISCONTINUITIES ARE PLACED AT SPATIAL MESH POINTS.
C     THE OTHER VECTORS ARE DEFINED IN THE SAME WAY AS U EXCEPT THAT
C                                              .       -
C           V = ( V  , ... , V ) TRANSPOSE AND V  IS SIMILARLY DEFD.
C           -      1          NV               -
C
C                 .
C     WHERE V AND V    ARE THE SOLUTION OF A COUPLED SYSTEM OF
C           -     -            ORDINARY  DIFFERENTIAL EQUATIONS OF
C                              DIMENSION NV.
C     IN THE CASE WHEN NV > 0 THIS SYSTEM OF DIFFERENTIAL EQUATIONS IS
C     ASSUMED TO HAVE THE FORM.
C                .
C        FV ( V, V , XI, UI, UI , RI , UI , UI  , ) = 0
C        --   -  -   -   -   - X  -    - T  - XT
C
C                                             .
C     WHERE ALL THE VECTORS APART FROM V  AND V  ARE OF LENGTH NPDE*NXI.
C                                      -      -
C     AND CONTAIN THE VALUES OF THE P.D.E. VARIABLES U , U  , R, U ,U
C                                                         X       T  XT
C     AT THE SPATIAL O.D.E. /P.D.E. COUPLING POINTS DEINED BY
C     THE VECTOR XI(NXI) .
C
C   THE SPATIAL MESH IS BOUNDED BY A AND B  A < X < B.
C   THE BOUNDARY CONDITIONS HAVE THE FORM
C                                 .                       .
C          B (T) R(X,T, U, U , V, V )  = G (T, U , U , V, V)  AT X = A
C           A    -      -  -X  -  -      -A    -   -X  -  -
C  AND
C                                 .                       .
C          B (T) R(X,T, U, U , V, V )  = G (T, U , U , V, V)  AT X = B.
C           B    -      -  -X  -  -      -B    -   -X  -  -
C
C  WHERE   NOT ALL OF THE FUNCTIONS B AND G ARE SET TO ZERO.
C
C  THE INITIAL CONDITIONS ARE GIVEN BY
C          U (X, 0)  = K (X)  AND V(O) = K
C          -           -1         -      -2                     0
C  THE DISCRETISATION METHOD USED BY THIS MODULE IS BASED ON A C  -
C  COLLOCATION  METHOD AND EVALUATES THE P.D.E. FUNCTIONS INBETWEEN
C  THE USER SUPPLIED MESH POINTS . ANY DISCONTINUITIES IN THE P.D.E.
C  DEFINING FUNCTION  Q MUST THEREFORE BE AT THE USER SUPPLIED
C  BREAK POINTS .
C  REFERENCES
C  ----------
C  BERZINS M. AND DEW P.M.
C  CHEBYSHEV POLYNOMIAL SOFTWARE FOR ELLIPTIC PARABOLIC P.D.ES
C  ACM TRANS. ON MATH. SOFT. 1990 PP XX - YY.
C
C  BERZINS M. AND DEW P.M.
C  A NOTE ON C0 CHEBYSHEV METHODS FOR PARABOLIC EQUATIONS.
C  IMA JOURNAL OF NUMERICAL ANALYSIS (1987) 7, 15-37.
C
C  BERZINS M. AND DEW P.M. DEPT OF COMPUTER STUDIES
C  THE UNIVERSITY , LEEDS , LS2 9JT ,REPORT NO 180 .
C
C----------------------------------------------------------------------
C
C   HOW TO USE THIS MODULE
C   **********************
C (1) DECIDE ON THE FORM OF THE SPATIAL DISCRETISATION METHOD TO BE
C     USED. THIS MODULE ALLOWS YOU TO DEFINE A SET OF (NEL + 1) SPATIAL
C     BREAKPOINTS , XBK(I) I = 1,NEL+1 . THESE BREAKPOINTS IN TURN
C     DEFINE NEL SPATIAL ELEMENTS. I.E.
C              XBK(I) =< ELEMENT I =< XBK(I+1).
C     IN THE CASE WHEN THE FUNCTION Q(.....) IN THE P.D.E. DEFINITION
C     HAS DISCONTINIUITIES YOU MUST PLACE A BREAKPOINT AT EACH
C     DISCONTINUITY.
C     PDECHEB  WILL APPROXIMATE THE SOLUTION TO THE P.D.E. IN THE SPACE
C     DIMENSION BY USING A PIECEWISE CHEBYSHEV POLYNOMIAL BETWEEN EACH
C     PAIR OF BREAKPOINTS. THE DEGREE OF THIS POLYNOMIAL IS SPECIFIED
C     BY THE VARIABLE NPOLY WHICH MUST BE GREATER THAN OR
C     EQUAL TO 1. WHEN IT IS 1 THE SPATIAL MESH CONSISTS ONLY OF THE
C     BREAKPOINTS AND A LINEAR POLYNOMIAL IS USED TO APPROXIMATE THE
C     SOLUTION BETWEEN THESE POINTS.
C     THE ONLY  PRE-SET UPPER LIMIT TO THE DEGREE OF POLYNOMIAL THAT
C     CAN BE USED IS A SOME WHAT ARBITRARY LIMIT OF 50.
C
C
C (2) SET NPDE = NUMBER OF P.D.E.S TO BE SOLVED , MUST BE >= 0 .
C     SET NEL  = NUMBER OF SPATIAL ELEMENTS TO BE USED , MUST BE >= 0.
C     DEFINE AN ARRAY OF BREAKPOINTS IN THE DOUBLE PRECISION ARRAY
C     XBK(IBK) WHERE IBK = NEL + 1 AND
C              XBK(I) < XBK(I+1) , I = 1,NEL
C     SET NPOLY TO THE DEGREE OF THE POLYNOMIALIN EACH ELEMENT , > 1 .
C         NOTES ON THE CHOICE OF NPOLY AND XBK(IBK)
C         -----------------------------------------
C         IT SHOULD BE NOTED THAT THE PDECHEB SOFTWARE HAS NO MEANS OF
C         ESTIMATING OR CONTROLLING THE SPATIAL DISCRETISATION ERROR.
C         THE ERROR INCURRED WILL DEPEND ON THE NUMBER AND POSITION
C         OF THE BREAK POINTS AND ON THE DEGREE OF POLYNOMIAL USED.
C         THE GENERAL ADVICE IS USE AS FEW BREAK POINTS AS POSSIBLE
C         AND AS HIGH A DEGREE OF POLYNOMIAL AS SEEMS SENSIBLE FOR
C         THE PROBLEM AT HAND. THE APPROPRIATENESS OF A GIVEN DEGREE
C         OF POLYNOMIAL CAN BE JUDGED BY THE FACT THAT THE HIGHER
C         DEGREE COEFFICIENTS OF THE POLYNOMIAL EXPANSION SHOULD BE
C         SMALL IN COMPARISON WITH THE LOWER POLYNOMIAL DEGREE.
C         IT SHOULD ALSO BE NOTED THAT THE LOCAL TIME ERROR TOLERANCES
C         ( THE PARAMETERS RTOL AND ATOL - SEE SECTION 5 BELOW)
C         PASSED TO THE DASSL CODE  SHOULD BE AN ORDER OF MAGNITUDE
C         SMALLER THAN THE EXPECTED SPATIAL ERROR. INEVITABLY THESE
C         AREAS OF UNCERTAINTY MEAN THAT SOME EXPERIMENTATION WITH
C         A GIVEN PROBLEM IS NECESSARY BEFORE AN CONFIDENCE CAN BE
C         PLACED IN THE NUMERICAL RESULTS.
C
C
C     SET M FOR SPACE CO-ORDINATE TYPE
C         = 0 FOR CARTESIAN,  = 1 FOR CYLINDRICAL, = 2 FOR SPHERICAL
C     SET NV = NUMBER OF O.D.E.S COUPLED TO THE P.D.E.S
C     SET NXI = NUMBER OF SPACE POINTS WHERE THE O.D.E.S ARE COUPLED
C     SET XI(NXI) TO THE VALUES OF THE COUPLING POINTS
C     FOR USE BY THE ROUTINE PDECHB WHICH DEFINES THE O.D.E. SYSTEM
C     BEING SOLVED BY THE INTEGRATOR.
C     SET NPTS = NEL * NPTL-1 , THIS IS THE TOTAL NUMBER OF SPATIAL
C     DISCRETISATION POINTS USED BY THIS MODULE.
C     DECLARE A DOUBLE PRECISION ARRAY X, OF DIMENSION NPTS ; X(NPTS)
C     AND PUT X(1) = XBK(1) = A AND X(NPTS) = XBK(NEL+1) = B
C     WHERE A AND B ARE THE LEFT AND RIGHT EDGES OF THE SPTAIAL MESH.
C     THIS ARRAY WILL BE USED TO RETURN TO YOU THE SPATIAL MESH POINTS
C     USED BY THIS SPATIAL DISCRETISATION MODULE.
C     DECLARE A DOUBLE PRECISION ARRAY OF LENGTH NEQN WHERE
C           NEQN = NPDE * NPTS + NV
C     THAT IS USED TO HOLD THE SOLUTION VECTOR . NEQN IS THE NUMBER OF
C     ORDINARY DIFFERENTIAL EQUATIONS THAT MUST BE PASSED ACROSS TO
C     THE DASSL  PACKAGE . THE SOLUTION TO THIS SYSTEM OF ORDINARY
C     DIFFFERENTIAL EQUATIONS THAT IS GENERATED BY DISCRETISING THE
C     CLASS OF P.D.E.S DEFINED ABOVE IS ORDERED IN ,SAY, U(NEQN) AS
C     FOLLOWS.
C       U(I) , I = (J-1) * NPDE + K , K = 1,...,NPDE , J = 1 ,.. ,NPTS
C            CONTAINS THE SOLUTION FOR P.D.E. K AT MESH POINT X(J).
C       U(L) , L = NPDE*NPTS + L1 , L1 = 1,..., NV
C            CONTAINS THE COUPLED O.D.E. COMPONENT V(L1)
C     DEFINE A DOUBLE PRECISION WORKSPACE OF LENGTH IWK WHERE
C       IWK = NPTL*(3*NPTL + 2 + 7*NPDE + NEL) +NXI*(5*NPDE+1) + NV + 2
C     THIS IS THE WORKSPACE THAT MUST BE PASSED ACROSS TO THE DASSL
C     ROUTINE AS THE WORKSPACE FOR THE O.D.E. RESIDUAL DEFINING ROUTINE
C     PDECHB.
C
C
C
C (3) PROVIDE A SET OF ROUTINES WHICH DESCRIBE THE PRECISE FORM OF THE
C     P.D.E. TO BE SOLVED. FOUR ROUTINES MUST BE PROVIDED AND THE NAMES
C     OF THESE ROUTINES ARE FIXED. THESE ROUTINES ARE:
C
C       SPDEFN : FORMS THE FUNCTIONS Q AND R IN THE P.D.E. DESCRIBED
C                ABOVE. THIS ROUTINE FORMS THE VALUES OF THE FUNCTIONS
C                Q AND R OVER SEVERAL MESHPOINTS SIMULTANEOUSLY.
C                IN FACT AT THE X(NPTL) POINTS IN ONE ELEMENT AT A TIME.
C                THE MESH POINTS USED ARE INTERNALLY
C                GENERATED BY THE DISCRETISATION ROUTINE AND ARE
C                BETWEEN THE USER DEFINED BREAKPOINTS.
C        SBNDR  : FORMS THE FUNCTIONS B AND G ASSOCIATED WITH THE
C                BOUNDARY CONDITIONS FOR THE P.D.E. ABOVE.
C       UVINIT : SUPPLIES THE INITIAL VALUES OF THE P.D.E. PART AND ALSO
C                SUPPLIES THE INITIAL VALUES OF THE O.D.E. PART.
C       SODEFN : SUPPLIES THE ODE RESIDUAL AS DEFINED BY THE FUNCTION
C                FV ABOVE.
C           NOTE: THE P.D.E. SOLUTION VALUES AT THE COUPLING POINTS
C           PASSED INTO SODEFN ARE DEFINED BY POLYNOMIAL INTERPOLATION
C           ON THE VALUES AT THE P.D.E. SPATIAL MESH POINTS.
C
C    N.B. EXAMPLES OF THESE ROUTINES FOR THREE PROBLEMS ARE PROVIDED
C         IN THE EXAMPLE PROBLEMS SECTION BELOW.
C
C
C (4) CALL THE INITIALISATION ROUTINE INICHB, USING THE FORM
C
C     CALL INICHB(NEQN,NPDE,NPTS,X,U,WK,IWK,M,TS,IBAND,ITIME,XBK,
C    *                  IBK,NEL,NPOLY,NV,NXI,XI,IDEV)
C***********************************************************************
C ROUTINE FOR INITIALISATION OF CHEBYSHEV GENERALIZED COLLOCATION METHOD
C
C  PARAMETER LIST
C ----------------
C  NEQN:          EMPTY ON ENTRY, ON EXIT IT CONTAINS THE NUMBER OF
C                 O.D.E.S GENERATED BY THE DISCRETISED FORM OF THE
C                 P.D.E. , GIVEN BY  NPDE*NEL*(NPTL-1) + NPDE + NV.
C
C  NPDE           NUMBER OF PARABOLIC P.D.E.S IN ONE SPACE DIMENSION
C
C  NPTS           NUMBER OF SPATIAL GRID POINTS USED IN M.O.L. SOLUTION.
C                 NOTE THIS SHOULD BE EQUAL TO (NPTL-1)*NEL + 1
C
C  X(NPTS)        EMPTY ARRAY ON ENTRY . ON EXIT THIS ARRAY
C                 CONTAINS THE MESH USED IN SEMI-DISCRETISATION
C
C  M              =0,1,2 IF CARTESIAN CYLINDRICAL OR SPHERICAL POLARS.
C
C  U(NEQN)        SOLUTION VECTOR  EMPTY ON ENTRY CONTAINS INITIAL
C                 VALUES ON EXIT. THIS ARRAY IS ORDERED AS FOLLOWS.
C                 U(1) - U(NPDE*NPTS)      P.D.E. SOLUTION COMPONENTS.
C                 U(NPDE*NPTS+1) - U(NEQN) O.D.E. COMPONENTS THAT ARE
C                 COUPLED TO THE P.D.E.
C
C  WK(IWK)        REAL WORKSPACE USED TO PASS FOUR MATRICES AND VARIOUS
C                 USEFUL VECTORS TO THE O.D.E.FUNCTION CALL ROUTINE
C                 RESID SEE BELOW FOR A DETAILED DESCRIPTION.
C
C   TS            STARTING LEVEL OF TIME INTEGRATION.
C
C   XBK(IBK)      REAL ARRAY OF BREAK POINTS  IBK = NEL +1  WHERE
C                 NEL IS THE NUMBER OF SPATIAL ELEMENTS.
C                      XBK(1) = XLEFT
C                      XBK(I) =< XBK(I+1)  I = 1,...,NEL .
C                      XBK(IBK) = XRIGHT.
C  NEL            THE NUMBER OF SPATIAL ELEMENTS , >= 1
C
C  NPOLY          THE DEGREE OF THE APPROXIMATING POLYNOMIAL USED
C                 BETWEEN EACH PAIR OF BREAKPOINTS .
C  ITIME          THIS MUST BE SET = 1 ON THE CALL OF THIS MODULE
C                 PRIOR TO THE DASSL  PACKAGE BEING CALLED.
C                 ONCE DASSL  HAS RETURNED THIS ROUTINE MAY BE CALLED
C                 WITH ITIME = 2 TO RECOVER THE SPATIAL MESH USED
C                 (THIS IS PLACED IN THE ARRAY X(NPTS) ).
C
C  NV             THE NUMBER OF AUXILARY O.D.E.S THAT ARE COUPLED TO
C                 THE P.D.E.
C  NXI            THE NUMBER OF COUPLING POINTS AT WHICH P.D.E. VALUES
C                 ARE USED TO DEFINE THE O.D.E.S
C
C  XI(NXI)        A VECTOR SPECIFYING THE POSITION OF THESE POINTS.
C                 NOTE THAT THESE POINTS MUST BE DISTINCT FROM THE
C                 BREAK - POINTS .
C
C  IDEV           NUMBER OF OUTPUT CHANNEL ON WHICH ERROR MESSAGES TO
C                 DO WITH THE COLLOCATION DISCRETISATION WILL APPEAR.
C
C
C
C (5) SET TS AND TOUT FOR START AND END INTEGRATION TIMES
C     SET INFO, WORK ARRAYS AS REQUIRED FOR TIME INTEGRATION
C     AND CALL THE DASSLD ROUTINE AS FOLLOWS
C     CALL DDASSL (PDECHB, NEQ, T, Y, YDOT, TOUT, INFO, RTOL, ATOL,
C    *           , IDID, RWORK, LRW, IWORK, LIW, WKRES, IRESWK, DGEJAC)
C
C  DASSL  CODE SOLVES A SYSTEM OF DIFFERENTIAL/ALGEBRAIC EQUATIONS OF
C  THE FORM G(T,Y,YDOT) = 0.
C
C  VALUES FOR Y  AND YPRIME AT THE INITIAL TIME MUST  BE GIVEN AS INPUT
C  THESE VALUES MUST BE CONSISTENT, (THAT IS. IF T,Y,YDOT ARE THE GIVEN
C  INITIAL VALUES, THEY MUST  SATISFY G(T,Y,YDOT) = 0.)
C  THE SUBROUTINE SOLVES THE SYSTEM FROM T TO TOUT. IT IS  EASY TO
C  CONTINUE THE SOLUTION TO GET RESULTS AT ADDITIONAL TOUT. THIS IS THE
C  INTERVAL MODE OF OPERATION. INTERMEDIATE RESULTS CAN ALSO BE
C  OBTAINED EASILY BY USING THE INTERMEDIATE-OUTPUT CAPABILITY.
C
C  ------------AN OVERVIEW OF ARGUMENTS TO DASSL-----------------------
C  THE PARAMETERS ARE
C
C  PDECHB -- THIS IS A SUBROUTINE PROVIDED BY PDECHEB TO DEFINE THE
C            DIFFERENTIAL/ALGEBRAIC SYSTEM
C
C  NEQ --  THE NUMBER OF DIFFERENTIAL/ALGEBRAIC EQUATIONS TO BE SOLVED
C
C  T -- THIS IS THE CURRENT VALUE OF THE INDEPENDENT VARIABLE.
C
C  TOUT -- THIS IS A POINT AT WHICH A SOLUTION IS DESIRED.
C
C  INFO(*) -- THE BASIC TASK OF THE CODE IS TO SOLVE THE System
C             FROM T TO TOUT AND RETURN AN ANSWER AT TOUT. INFO(*) IS
C             INTEGER ARRAY WHICH IS USED TO COMMUNICATE EXACTLY HOW
C             YOU WANT THIS TASK TO BE CARRIED OUT.
C
C  Y(*) -- THIS ARRAY CONTAINS THE SOLUTION  COMPONENTS AT T
C
C  YDOT(*) -- THIS ARRAY CONTAINS THE DERIVATIVES OF Y(*) AT T
C
C  RTOL,ATOL -- THESE QUANTITIES REPRESENT ABSOLUTE AND Relative error
C               TOLERANCES WHICH YOU PROVIDE TO INDICATE HOW ACCURATELY
C               YOU WISH THE SOLUTION TO BE COMPUTED. YOu may choose
C               THEM TO BE BOTH SCALARS OR ELSE BOTH VECtors.
C
C  IDID -- THIS SCALAR QUANTITY IS AN INDICATOR REPORTING WHAT THE CODE
C          YOU MUST MONITOR THIS INTEGER VARIABLE TO DECIDE WHAT ACTION
C          TO TAKE NEXT.
C
C  RWORK(*),LRW -- RWORK(*) IS A REAL WORK ARRAY OF Length lrw which
C                  PROVIDES THE CODE WITH NEEDED STORAGE SPACE.
C
C  IWORK(*),LIW -- IWORK(*) IS AN INTEGER WORK ARRAY OF LENGTH LIW
C                  WHICH PROVIDES THE CODE WITH NEEDED storage space.
C
C  WKRES,IRESWK -- THESE ARE REAL AND INTEGER PARAMETER ARRAYS WHICH
C                  ARE USED TO COMMUNICATE INFORMATION FROM THE
C                  INITIALISATION ROUTINE INICHB TO THE SPATIAL
C                  DISCRETISATION  SUBROUTINE PDECHB.
C
C  DGEJAC -- THIS IS THE NAME OF A DUMMY SUBROUTINE WHICH IS PROVIDED
C            BY THE PDECHEB SOFTWARE. IT MUST BE DECLARED AS EXTERNAL
C            IN THE CALLING PROGRAM.
C
C  QUANTITIES WHICH ARE USED AS INPUT ITEMS ARE
C     NEQ, T Y(*), YDOT(*), TOUT, INFO(*), RTOL, ATOL , RWORK(1),
C     RWORK(2), RWORK(3), LRW, IWORK(1), IWORK(2),IWORK(3),AND LIW.
C
C  QUANTITIES WHICH MAY BE ALTERED BY THE CODE ARE
C     T, Y(*), YDOT(*), INFO(1), RTOL, ATOL, IDID, RWORK(*) AND IWORK(*)
C
C   (6) POST PROCESS THE SOLUTION.
C
C     THE SOLUTION VECTOR RETURNED BY DASSL CAN BE USED FOR POST-
C     PROCESSING IN A NUMBER OF WAYS.
C
C     SPATIAL INTERPOLATION
C     ---------------------
C     THE VECTOR Y(T) RETURNED BY DASSL CONSISTS ONLY OF SOLUTION
C     VALUES AT THE MESH POINTS DEFINED BY INICHB. THE FOLLOWING
C     INTERPOLATION ROUTINE ENABLES SOLUTION VALUES AT OTHER POINTS
C     TO BE OBTAINED.
C
C     SUBROUTINE INTERC(XP,UP,NP,U,NEQ,NPDE,IFLAG,ITYPE,WK,IWK)
C********************************************************************
C
C        SPACE INTERPOLATION ROUTINE FOR POST-PROCESSING OF SOLUTION
C        PRODUCED BY DASSL.
C        THIS ROUTINES PROVIDES VALUES OF THE SOLUTION AND POSSIBLY THE
C        FIRST DERIV IN SPACE AND THE FLUX ON THE MESH XP(NP).
C
C        PARAMETERS
C       --------------
C        NPDE     ON ENTRY MUST CONTAIN NO OF PARABOLIC EQUATIONS
C        NPTS     ON ENTRY MUST CONTAIN THE NUMBER OF SPATIAL
C                 MESH POINTS USED IN TIME INTEGRATION.
C        NP       ON ENTRY MUST CONTAIN THE NUMBER OF SPATIAL
C                 INTERPOLATION POINTS
C        XP(NP)   ARRAY WHICH ON ENTRY
C                 CONTAINS THE SPATIAL INTERPOLATION POINTS
C                 WE ASSUME THAT
C                    XP(I) <  XP(I+1)  ,  I = 1,...,NP-1
C        UP(NPDE,NP,ITYPE)  EMPTY ARRAY FOR THE INTERPOLATED VALUES AT
C                           THE CURRENT TIME LEVEL. THE VALUES OF THIS
C                           ARRAY ON EXIT DEPEND ON THE PARAMETER ITYPE.
C        U(NPDE,NPTS) THE CURRENT SOLUTION VECTOR COMPUTED BY THE ODE
C                  TIME INTEGRATOR MUST BE SUPPLIED IN THIS VECTOR.
C        IFLAG          ERROR FLAG       = 0 ON SUCCESSFUL RETURN
C                                        = 1 IF EXTRAPOLATION TRIED.
C                                        = 2 IF WORKSPACE NOT INITIAL
C                                               ISED ON ENTRY BY INICHB.
C                                        = 3 ILLEGAL VALUE OF ITYPE.
C        ITYPE = 1  ONLY THE SOLUTION IS OUTPUT IN THE ARRAY UP
C                   UP(J,K,1) HOLDS U(XP(K),T) FOR PDE J
C                2  AS FOR 1 BUT THE FIRST DERIV IS ALSO OUTPUT.
C                   UP(J,K,2) HOLDS D/DX U(XP(K),T).
C
C        WK(IWK) THE WORKSPACE USED BY THE CHEBYSHEV METHOD. THIS
C                MUST BE THE WORKSPACE INITIALISED BY INICHB.
C
C
C       !*********************************************************!
C       ! IN THE CASE WHEN THE EXACT SOLUTION IS NOT KNOWN IT MAY !
C       ! STILL BE NECESSARY TO SUPPLY A DUMMY ROUTINE EXACT TO   !
C       ! SATISFY LOADER REQUIREMENTS (SEE THE NEXT SECTION FOR A !
C       ! DESCRIPTION OF  EXACT.                                  !
C       !*********************************************************!
C
C     ESTIMATING THE ERROR WHEN THE EXACT SOLUTION IS KNOWN.
C     ------------------------------------------------------
C     THIS CAN BE DONE BY THE FOLLOWING CALL
C
C     CALL ERROR(U,NPDE,NPTS,X,M,ENORM,GERR,T,RELERR,ABSERR,
C    *                 ITRACE,RWK,IWK)
C
C**********************************************************************
C       THE FOLLOWING ROUTINE COMPUTES THE ERROR ENORM IN THE NUMERICAL
C       SOLUTION BY USING A COMBINATION OF THE L2 FUNCTION AND VECTOR
C       NORMS. GERR IS THE MAXIMUM ERROR AT THE GRID POINTS
C       THE EXACT SOLUTION IS ASSUMED TO BE GIVEN BY THE USER PROVIDED
C                SUBROUTINE EXACT(T,NPDE, NP, XP, US)
C                DOUBLE PRECISION US(NPDE, NP),XP(NP),T
C                WHERE US(J,I) ON EXIT CONTAINS THE SOLUTION AT TIME T
C                FOR NPDE J AT THE MESH POINT XP(I)
C
C     PARAMETER LIST
C     --------------
C  U(NEQN)        SOLUTION VECTOR  COMPUTED BY DASSL AT TIME T . ON
C                 ENTRY THIS ARRAY IS ASSUMED TO BE ORDERED AS FOLLOWS
C                 U(1) - U(NPDE*NPTS)      P.D.E. SOLUTION COMPONENTS.
C                 U(NPDE*NPTS+1) - U(NEQN) O.D.E. COMPONENTS THAT ARE
C                 COUPLED TO THE P.D.E.
C
C  NPDE           NUMBER OF PARABOLIC P.D.E.S IN ONE SPACE DIMENSION
C
C  NPTS           NUMBER OF SPATIAL GRID POINTS USED IN M.O.L. SOLUTION.
C                 NOTE THIS SHOULD BE EQUAL TO (NPTL-1)*NEL + 1
C
C  X(NPTS)        ON ENTRY THIS ARRAY MUST
C                 CONTAIN THE MESH USED IN SEMI-DISCRETISATION
C
C  M              =0,1,2 IF CARTESIAN CYLINDRICAL OR SPHERICAL POLARS.
C
C  ENORM          L2 ERROR NORM ESTIMATED BY USING TRAPEZOIDAL RULE
C                 WITH 100 EVENLY SPACED POINTS IS OUTPUT IN ENORM
C
C  GERR           MAXIMUM GRID ERROR OVER THE ARRAY OF SPATIAL GRID
C                 POINTS X(NPTS) IS OUTPUT IN GERR
C
C  T              CURRENT TIME LEVEL OF TIME INTEGRATION ( INPUT).
C
C  RELERR         RELATIVE ERROR TOLERANCE SUPPLIED TO DASSL (RTOL IN
C                 THE CALL TO THAT ROUTINE) (INPUT)
C
C  ABSERR         ABSOLUTE ERROR TOLERANCE SUPPLIED TO DASSL (ATOL IN
C                 THE CALL TO THAT ROUTINE). (INPUT)
C
C  ITRACE         INTEGER TRACE LEVEL SET TO ZERO FOR NO TRACE SET =1
C                 FOR TRACE INFORMATION.   (INPUT)
C
C  RWK(IWK)       REAL WORKSPACE INITIALISED BT INICHB AND PASSED TO
C                 THE D.A.E.FUNCTION CALL ROUTINE  RESID
C                 SEE BELOW FOR A DETAILED DESCRIPTION.(INPUT)
C**********************************************************************
C EXAMPLE  PROBLEM ONE
C SOLUTION OF MOVING BOUNDARY  PROBLEM BY CO-ORDINATE TRANSFORMATION.
C********************************************************************
C  THIS PROBLEM IS THE ONE PHASE STEFAN PROBLEM (HOFFMAN (1977) ) SEE
C  FURZELAND R.M. A COMPARATIVE STUDY OF NUMERICAL METHODS FOR MOVING
C                 BOUNDARY PROBLEMS. J.I.M.A. (1977) ,26, PP 411 - 429.
C  THE PROBLEM HAS  MELTING DUE TO HEAT INPUT AT THE FIXED
C  BOUNDARY . THE P.D.E. IS DEFINED BY THE EQUATIONS
C         U  =  U        0 < Y < S(T) , 0.1 < T < 1
C          T     YY
C            U  = - EXP(T) , Y = 0
C             Y            .
C            U  =  0  AND  S(T) = - U   ON THE MOVING BOUNDARY Y = S(T).
C                                    Y
C  AND THE INITIAL SOLUTION VALUES AT T = 0.1 ARE GIVEN BY THE ANALYTIC
C  SOLUTION
C            U = EXP(T-Y) - 1 , S(T) = T.
C  THE PROBLEM IS REWRITTEN BY USING THE CO-ORDINATE TRANSFORMATION
C  GIVEN BY  X(T)  =  Y / S(T)  . THE EQUATIONS THEN READ
C                      .
C     S * S * U  - S * S  * X * U   =  U     , X IN (0,1).
C              T                 X      XX
C  WITH THE NEUMANN TYPE BOUNDARY CONDITIONS
C                                               .
C     U  = - EXP(T)  AT X=0  AND  U  = - S(T) * S(T) AT X = 1
C      X                           X
C  AND THE O.D.E. COUPLING POINT EQUATION AT X = 1 WHICH IMPLICITLY
C  DEFINES S(T) IS GIVEN  BY
C     U(1,T) = 0
C  THE EXACT SOLUTION IS NOW DEFINED BY
C     U(X,T) = EXP((T - X*S(T))  , S(T) = T
C
C WE SHALL NOW DETAIL THE ROUTINES NEEDED TO DESCRIBE THIS PROBLEM.
C        PROBLEM DESCRIPTION ROUTINES
C       ******************************
C EXACT SOLUTION
C      SUBROUTINE EXACT( TIME, NPDE, NPTS, X, U)
C      ROUTINE FOR P.D.E. EXACT VALUES  (IF KNOWN)
C      INTEGER NPDE, NPTS
C      DOUBLE PRECISION X(NPTS), U(NPDE,NPTS), TIME, P
C      P=DSQRT(2.0D0)*0.5D0
C      DO 10 I = 1,NPTS
C10       U(1,I) = DEXP( TIME * (1 - X(I))) - 1.0D0
C      RETURN
C      END
C      SUBROUTINE UVINIT( NPDE, NPTS, X, U, NV, V)
C      ROUTINE FOR P.D.E. INITIAL VALUES.
C      INTEGER NPDE, NPTS, NV
C      DOUBLE PRECISION X(NPTS), U(NPDE,NPTS), TIME, V(NV)
C      TIME=0.1D0
C      V(1)=0.1D0
C      CALL EXACT(TIME,NPDE,NPTS,X,U)
C      RETURN
C      END
C
C      SUBROUTINE SPDEFN(T, X, NPTL, NPDE, U, DUDX, UDOT, UTDX, Q, R,
C     1                  NV, V, VDOT, IRES)
C      PROBLEM INTERFACE  FOR THE MOVING BOUNDARY PROBLEM.
C      INTEGER NPTL, NPDE, NV, I, IRES
C      DOUBLE PRECISION X(NPTL), U(NPDE,NPTL), DUDX(NPDE,NPTL), T,
C    1         V(1), VDOT(1), F(NPDE,NPTL), Q(NPDE,NPTL) ,R(NPDE,NPTL),
C    2         UDOT(NPDE,NPTL), UTDX(NPDE,NPTL)
C      DO 10 I = 1,NPTL
C         R(1,I) = DUDX(1,I)
C         Q(1,I) = V(1)*V(1)*UDOT(1,I) -X(I)*VD(I)*DUDX(1,I) * V(1)
C10    CONTINUE
C      RETURN
C      END
C      SUBROUTINE SBNDR( T, BETA, GAMMA, U, UX, UDOT, UTDX, NPDE,
C     1                  LEFT, NV, V, VDOT, IRES)
C  THIS SUBROUTINE PROVIDES THE LEFT AND RIGHT BOUNDARY VALUES
C  FOR THE MOVING BOUNDARY PROBLEM IN THE FORM.
C           BETA(I) * DU/DX(I) = GAMMA(I)
C  WHERE I = 1,NPDE AND GAMMA IS A FUNCTION OF U,X AND T
C
C      INTEGER NPDE, NV, IRES
C      LOGICAL LEFT
C      DOUBLE PRECISION BETA(NPDE), GAMMA(NPDE), U(NPDE), UX(NPDE)
C    -                  ,T, V(1), VDOT(1), UDOT(NPDE), UTDX(NPDE)
C      BETA(1) = 1.0D0
C      IF(LEFT)THEN
C         GAMMA(1) = -V(1)*DEXP(T)
C      ELSE
C         GAMMA(1) = -V(1)*VD(1)
C      END IF
C      RETURN
C      END
C
C      SUBROUTINE SODEFN(T, NV, V, VDOT, NPDE, NXI, XI, UI, UXI, RI,
C    1                    UTI, UTXI, VRES, IRES)
C      ROUTINE TO PROVIDE RESIDUAL OF COUPLED ODE SYSTEM FOR THE
C      MOVING BOUNDARY PROBLEM.
C      NOTE HOW IRES CAN BE RESET TO COPE WIH ILLEGAL VALUES OF THE
C           MOVING BOUNDARY POSITION V(1).
C      INTEGER NPDE, NXI, NV, IRES
C      DOUBLE PRECISION T, XI(NXI), UI(NPDE,NXI), UXI(NPDE,NXI),
C    1         RI(NPDE,NXI), UTI(NPDE,NXI), UTXI(NPDE,NXI), VRES(NV),
C    2         V(NV), VDOT(NV), TEM
C      VRES(1) = UI(1,1)
C      TEM = 1.0D0
C      IF(IRES .EQ. -1)TEM = 0.0D0
C      IF(V(1) .LT. 0.0D0)IRES = -1
C      VRES(1) = TEM * UI(1,1)
C      RETURN
C      END
C
C   EXAMPLE PROGRAM ONE ....................
C
C     C0 COLLOCATION PARAMETERS
C       PARAMETER ( IBK   = 21, NEL  = IBK-1 , NPDE = 1, NV = 1,
C    1              NPOLY =  2,  NPTS = NEL*NPOLY+1,     NXI = 1,
C    2              NEQ   = NPTS * NPDE + NV,
C    3              NWKRES= (NPOLY+1) * (5*NXI + 3*NPOLY+NEL+5+7*NPDE) +
C    4                       NPDE * 8 + 3 + NV + NXI,
C     DDASSL TIME INTEGRATION PARAMETERS
C    5              MAXORD = 5, LRW = 40 + (MAXORD+4) * NEQ + NEQ**2,
C    6              LIW = 20 + NEQ )
C
C       INTEGER IWORK(LIW), INFO(15), IBAND, M, ITIME, I, IDID, IRESWK,
C    1          IDEV, ITRACE
C       DOUBLE PRECISION XBK(IBK), X(NPTS), Y(NEQ), YDOT(NEQ),
C    1          WKRES(NWKRES), RWORK(LRW), XI(1), T, TOUT, RTOL, ATOL,
C    2          ENORM, GERR, VERROR, CTIME, TOL
C       EXTERNAL PDECHB, DGEJAC
C       COMMON /SDEV2/ ITRACE, IDEV
C       COMMON /PROB1/ TOL
C       TOL  = 0.1D-5/50.D0
C       M    = 0
C       T    = TOL
C       IDEV = 4
C       ITRACE = 1
C       WRITE(IDEV,9)NPOLY, NEL
C9      FORMAT(' TEST PROBLEM 1'/' ***********'/' POLY OF DEGREE =',I4,
C    1         ' NO OF ELEMENTS = ',I4)
C       XI(1)  = 1.0D0
C       DO 10 I = 1,IBK
C10       XBK(I) = (I-1.0D0)/(IBK-1.0D0)
C           INITIALISE THE P.D.E. WORKSPACE
C       ITIME  = 1
C       CALL INICHB(NEQ, NPDE, NPTS, X, Y, WKRES, NWKRES, M, T, IBAND,
C    1              ITIME, XBK, IBK, NEL, NPOLY, NV, NXI, XI, IDEV)
C       IF(ITIME .EQ. -1)THEN
C          WRITE(IDEV, 15)
C15        FORMAT(' INICHB ROUTINE RETURNED ITIME = -1 - RUN HALTED ')
C          GOTO 100
C       END IF
C         SETUP DASSL PARAMETERS
C      RTOL = TOL
C      ATOL = TOL
C      DO 20 I = 1,11
C20      INFO(I) = 0
C         BANDED MATRIX OPTION WHEN INFO(6) = 1
C      IF(INFO(6) .EQ. 1)THEN
C         IWORK(1) = IBAND
C         IWORK(2) = IBAND
C      END IF
C30    TOUT = T * 10.0D0
C      IF(TOUT .GE. 2.D0)TOUT =2.0D0
C      CALL DDASSL( PDECHB, NEQ, T, Y, YDOT, TOUT, INFO, RTOL, ATOL,
C    1              IDID, RWORK, LRW, IWORK, LIW, WKRES, IRESWK, DGEJAC)
C      IF( IDID .LT. 0 )THEN
C          DASSL FAILED TO FINISH INTEGRATION.
C          WRITE(IDEV,40)T,IDID
C40        FORMAT(' AT TIME T = ',D11.3,' DASSL RETURNED IDID =',I3)
C          GOTO 100
C      ELSE
C        DASSL INTEGRATED TO T = TOUT
C        CALL TO POST PROCESSING HERE E.G. SPACE INTERPOLATION.
C        ITRACE = 1
C        CALL ERROR( Y, NPDE, NPTS, X, M, ENORM, GERR, T, RTOL, ATOL,
C    1               ITRACE, WKRES, NWKRES)
C        ITRACE = 0
C        VERROR  = Y(NEQ) - T
C        WRITE(IDEV,50)Y(NEQ),VERROR
C50      FORMAT(' MOVING BOUNDARY IS AT ',D12.4,' WITH ERROR=',D12.4)
C        IF(TOUT .LT. 1.99D0 ) GOTO 30
C      END IF
C100    CONTINUE
C      WRITE(IDEV,110)IWORK(11),IWORK(12),IWORK(13)
C110    FORMAT(' NSTEPS =',I5,' NRESID =',I5,' JAC = ',I4)
C       STOP
C       END
C
C
C
C EXAMPLE PROBLEM TWO
C ********************
C     THIS PROBLEM IS DEFINED BY
C             -2    2               2
C     U U  = X   ( X  U U  )   + 5 U  + 4 X U U     ,  X IN (0,1)
C        T                X  X                 X
C
C     THE LEFT BOUNDARY CONDITION AT X = 0 (LEFT = .TRUE. ) IS GIVEN BY
C        U (0,T)  = 0.0
C         X
C     THE RIGHT BOUNDARY CONDITION IS  (LEFT = .FALSE.)
C         U( 1,T) = EXP ( -T )
C
C      THE INITIAL CONDITION IS GIVEN BY THE EXACT SOLUTION ;
C        U( X, T )  = EXP ( 1 - X*X - T )  , X IN ( 0,1)
C                            2
C**********************************************************************
C
C     C0 COLLOCATION PARAMETERS
C       PARAMETER ( IBK   =  2, NEL  = IBK-1 , NPDE = 1, NV = 0,
C    1              NPOLY = 10, NPTS = NEL*NPOLY+1,     NXI = 0,
C    2              NEQ   = NPTS * NPDE + NV,
C    C              NWKRES= 2*(NPOLY+1)*(NPOLY+NEL+2) + 2 + NV +
C    3              NWKRES= (NPOLY+1) * (5*NXI + 3*NPOLY+NEL+5+7*NPDE) +
C    4                       NPDE * 8 + 3 + NV + NXI,
C    C                       NPDE * (7 * (NPOLY+1+NXI) + 8),
C     DDASSL TIME INTEGRATION PARAMETERS
C    5              MAXORD = 5, LRW = 40 + (MAXORD+4) * NEQ + NEQ**2,
C    6              LIW = 20 + NEQ )
C
C       INTEGER IWORK(LIW), INFO(15), IBAND, M, ITIME, I, IDID, IRESWK,
C    1          IDEV, ITRACE
C       DOUBLE PRECISION XBK(IBK), X(NPTS), Y(NEQ), YDOT(NEQ),
C    1          WKRES(NWKRES), RWORK(LRW), XI(1), T, TOUT, RTOL, ATOL,
C    2          ENORM, GERR, CTIME
C       EXTERNAL PDECHB, DGEJAC
C       COMMON /SDEV2/ ITRACE, IDEV
C       M    = 2
C       T    = 0.0D0
C       IDEV = 4
C       ITRACE = 1
C       WRITE(IDEV,9)NPOLY, NEL
C9      FORMAT(' TEST PROBLEM 1'/' ***********'/' POLY OF DEGREE =',I4,
C    1         ' NO OF ELEMENTS = ',I4)
C       DO 10 I = 1,IBK
C10       XBK(I) =          (I-1.0D0) / (IBK - 1.0D0)
C           INITIALISE THE P.D.E. WORKSPACE
C       ITIME = 1
C       CALL INICHB(NEQ, NPDE, NPTS, X, Y, WKRES, NWKRES, M, T, IBAND,
C    1              ITIME, XBK, IBK, NEL, NPOLY, NV, NXI, XI, IDEV)
C       IF(ITIME .EQ. -1)THEN
C          WRITE(IDEV, 15)
C15        FORMAT(' INICHB ROUTINE RETURNED ITIME = -1 - RUN HALTED ')
C          GOTO 100
C       END IF
C         SETUP DASSL PARAMETERS
C      RTOL = 1.0D-8
C      ATOL = 1.0D-8
C      DO 20 I = 1,11
C20      INFO(I) = 0
C      INFO(11)= 1
C         BANDED MATRIX OPTION WHEN INFO(6) = 1
C      IF(INFO(6) .EQ. 1)THEN
C         IWORK(1) = IBAND
C         IWORK(2) = IBAND
C      END IF
C30    TOUT = T + 0.1D0
C      CALL DDASSL( PDECHB, NEQ, T, Y, YDOT, TOUT, INFO, RTOL, ATOL,
C    1              IDID, RWORK, LRW, IWORK, LIW, WKRES, IRESWK, DGEJAC)
C      IF( IDID .LT. 0 )THEN
C          DASSL FAILED TO FINISH INTEGRATION.
C          WRITE(IDEV,40)T,IDID
C40        FORMAT(' AT TIME T = ',D11.3,' DASSL RETURNED IDID =',I3)
C          GOTO 100
C      ELSE
C        DASSL INTEGRATED TO T = TOUT
C        CALL TO POST PROCESSING HERE E.G. SPACE INTERPOLATION.
C        CALL ERROR( Y, NPDE, NPTS, X, M, ENORM, GERR, T, RTOL, ATOL,
C    1               ITRACE, WKRES, NWKRES)
C        IF(TOUT .LT. 0.99D0 ) GOTO 30
C      END IF
C100    CONTINUE
C      WRITE(IDEV,110)IWORK(11),IWORK(12),IWORK(13)
C110    FORMAT(' NSTEPS =',I5,' NRESID =',I5,' JAC = ',I4)
C       STOP
C       END
C      SUBROUTINE UVINIT( NPDE, NPTS, X, U, NV,V)
C      ROUTINE FOR P.D.E. INITIAL VALUES.
C      INTEGER NPDE, NPTS, NV
C      DOUBLE PRECISION X(NPTS), U(NPDE,NPTS), V(1), T
C        T = 0.0D0
C        V(1) IS A DUMMY VARIABLE AS THERE ARE NO COUPLED O.D.E.S
C        CALL EXACT( T, NPDE, NPTS, X, U )
C      RETURN
C      END
C
C      SUBROUTINE SPDEFN( T, X, NPTL, NPDE, U, DUDX, UDOT, UTDX, Q, R,
C    1                    NV, V, VDOT, IRES)
C      ROUTINE TO DESCRIBE THE BODY OF THE P.D.E.
C      THE P.D.E. IS WRITEN AS       -M   M
C         Q(X,T,U, U  , U  , U  ) = X   (X  R(X,T,U,U , U , U  ))
C                   X    T    TX                     X   T   TX  X
C      THE FUNCTIONS Q AND R MUST BE DEFINED IN THIS ROUTINE.
C      DEFINITIONS FOR THE MODEL PROBLEM ARE GIVEN
C      NOTE NV = 0 : THERE IS NO O.D.E PART.
C      INTEGER NPDE, NPTL, I, J, NV, IRES
C      DOUBLE PRECISION T, X(NPTL), U(NPDE,NPTL), DUDX(NPDE,NPTL),
C    1         UDOT(NPDE,NPTL), Q(NPDE,NPTL), R(NPDE,NPTL), V, VDOT,
C    2         UTDX(NPDE,NPTL)
C      DO 10 I = 1,NPTL
C         R(1,I) = U(1,I) * DUDX(1,I)
C         Q(1,I) = U(1,I) * UDOT(1,I) - 5.0D0 * U(1,I)**2
C    1                                - 4.0D0 * U(1,I)*DUDX(1,I)*X(I)
C10    CONTINUE
C      RETURN
C      END
C
C      SUBROUTINE SBNDR( T, BETA, GAMMA, U, UX, UDOT, UTDX, NPDE, LEFT,
C    1                   NV, V, VDOT, IRES)
C      BOUNDARY CONDITIONS ROUTINE
C      INTEGER NPDE, NV, IRES
C      DOUBLE PRECISION T, BETA(NPDE), GAMMA(NPDE), U(NPDE), C2,
C    1                  UX(NPDE), V, VDOT, UDOT(NPDE), UTDX(NPDE)
C      LOGICAL LEFT
C      IF(LEFT) THEN
C         BETA (1) = 1.0D0
C         GAMMA(1) = 0.0D0
C      ELSE
C         BETA (1) = 0.0D0
C         GAMMA(1) = U(1) - DEXP( -T )
C         BETA (1) = 1.0D0
C         GAMMA(1) = - 2.D0 *U(1)**2
C      END IF
C      RETURN
C      END
C
C      DUMMY O.D.E. ROUTINE AS NV IS ZERO
C      SUBROUTINE SODEFN
C      RETURN
C      END
C EXACT SOLUTION
C      SUBROUTINE EXACT( TIME, NPDE, NPTS, X, U)
C      ROUTINE FOR P.D.E. EXACT VALUES  (IF KNOWN)
C      INTEGER NPDE, NPTS, I
C      DOUBLE PRECISION X(NPTS), U(NPDE,NPTS), TIME
C      DO 10 I = 1,NPTS
C10       U(1,I) = DEXP( 1.0D0 - X(I)**2 - TIME)
C      RETURN
C      END
C
C EXAMPLE PROBLEM 3
C *********************
C     THIS PROBLEM IS DEFINED BY
C               -1
C       U  = ( C   U  )  - C * EXP(-2U) + EXP(-U)  ,  X IN (-1,0)
C        T      1   X  X    1
C  AND
C               -1
C       U  = ( C   U  )  - C * EXP(-2U) + EXP(-U)  ,  X IN (0,1)
C        T      2   X  X    2
C  WHERE
C       C  = 0.1     AND    C   = 1.0
C        1                   2
C
C     THE LEFT BOUNDARY CONDITION AT X =-1 (LEFT = .TRUE. ) IS GIVEN BY
C         U(-1,T)  = LOG ( - C  + T + P)
C                       1
C     THE RIGHT BOUNDARY CONDITION IS  (LEFT = .FALSE.)
C         U( 1,T) + (C + T + P ) U  = LOG ( - C  + T + P) + 1.0D0
C                                 X
C
C      THE INITIAL CONDITION IS GIVEN BY THE EXACT SOLUTION ;
C        U( X, T )  = LOG ( C X + T + P )  , X IN ( -1, 0)
C                            1
C        U( X, T )  = LOG ( C X + T + P )  , X IN (  0, 1)
C                            2
C**********************************************************************
C      SUBROUTINE UVINIT( NPDE, NPTS, X, U, NV,V)
C      ROUTINE FOR P.D.E. INITIAL VALUES.
C      INTEGER NPDE, NPTS, NV
C      DOUBLE PRECISION X(NPTS), U(NPDE,NPTS), V(1), T
C        T = 0.0D0
C        V(1) IS A DUMMY VARIABLE AS THERE ARE NO COUPLED O.D.E.S
C        CALL EXACT( T, NPDE, NPTS, X, U )
C      RETURN
C      END
C
C      SUBROUTINE SPDEFN( T, X, NPTL, NPDE, U, DUDX, UDOT, UTDX, Q, R,
C    1                    NV, V, VDOT, IRES)
C      ROUTINE TO DESCRIBE THE BODY OF THE P.D.E.
C      THE P.D.E. IS WRITEN AS       -M   M
C         Q(X,T,U, U  , U  , U  ) = X   (X  R(X,T,U,U , U , U  ))
C                   X    T    TX                     X   T   TX  X
C      THE FUNCTIONS Q AND R MUST BE DEFINED IN THIS ROUTINE.
C      DEFINITIONS FOR THE MODEL PROBLEM ARE GIVEN
C      NOTE NV = 0 : THERE IS NO O.D.E PART.
C      INTEGER NPDE, NPTL, I, J, NV, IRES
C      DOUBLE PRECISION T, X(NPTL), U(NPDE,NPTL), DUDX(NPDE,NPTL),
C    1         UDOT(NPDE,NPTL), Q(NPDE,NPTL), R(NPDE,NPTL), V, VDOT,
C    2         UTDX(NPDE,NPTL), C
C      IF(X(1) .LT. 0.0D0 .AND. X(NPTL) .LE. 0.0D0)THEN
C        ELEMENT TO LEFT OF THE INTERFACE AT 0.0
C        C  =  0.1D0
C      ELSE
C        C =   1.0D0
C      END IF
C      DO 10 I = 1,NPTL
C         R(1,I) = DUDX(1,I) /C
C         Q(1,I) = UDOT(1,I) - DEXP(-U(1,I))- DEXP(-2.0D0*U(1,I))* C
C10    CONTINUE
C      RETURN
C      END
C
C      SUBROUTINE SBNDR( T, BETA, GAMMA, U, UX, UDOT, UTDX, NPDE, LEFT,
C    1                   NV, V, VDOT, IRES)
C      BOUNDARY CONDITIONS ROUTINE
C      INTEGER NPDE, NV, IRES
C      DOUBLE PRECISION T, BETA(NPDE), GAMMA(NPDE), U(NPDE), C2,
C    1                  UX(NPDE), V, VDOT, UDOT(NPDE), UTDX(NPDE)
C      LOGICAL LEFT
C      IF(LEFT) THEN
C         BETA (1) = 0.0D0
C         GAMMA(1) = U(1) - DLOG( -0.1 + T + 1.0D0)
C      ELSE
C         C2 = 1.0D0
C         BETA (1) = C2 * ( C2 + T + 1.0D0)
C         GAMMA(1) = U(1) - DLOG( C2 + T + 1.0D0) + 1.0D0
C      END IF
C      RETURN
C      END
C
C      DUMMY O.D.E. ROUTINE AS NV IS ZERO
C      SUBROUTINE SODEFN
C      RETURN
C      END
C EXACT SOLUTION
C      SUBROUTINE EXACT( TIME, NPDE, NPTS, X, U)
C      ROUTINE FOR P.D.E. EXACT VALUES  (IF KNOWN)
C      INTEGER NPDE, NPTS, I, IDERIV
C      DOUBLE PRECISION X(NPTS), U(NPDE,NPTS), TIME, C
C      COMMON /PROB3/ IDERIV
C      IF(IDERIV .EQ. 0)THEN
C         DO 10 I = 1,NPTS
C            C = 1.0D0
C            IF(X(I) .LT. 0.0D0)C = 0.1D0
C10          U(1,I) = DLOG( TIME + 1.0D0 + C * X(I))
C      ELSE
C         DO 20 I = 1,NPTS
C            C = 1.0D0
C            IF(X(I) .LT. 0.0D0)C = 0.1D0
C            U(1,I) = C / ( TIME + 1.0D0 + C * X(I))
C            IF(X(I) .EQ. 0.0D0) U(1,I) = 0.55D0 / ( TIME + 1.0D0 )
C20       CONTINUE
C      END IF
C      RETURN
C      END
C
C
C  OTHER EXAMPLE PROBLEMS
C  **********************
C
C EXAMPLE PROGRAMS ARE PROVIDED FOR THE POOL EVAPORATION PROBLEM
C DESCRIBED IN THE PAPER THAT ACCOMPANIES THIS CODE AND FOR THE
C
C     FOURTH ORDER P.D.E. PROBLEM WRITTEN AS ELLIPTIC-PARABOLIC SYSTEM.
C
C     U     =  K U     + UU    - U U
C      XXT        XXXX     XXX    X XX
C
C-----------------------------------------------------------------------
C
C   SOFTWARE STRUCTURE
C   ******************
C
C     THE SUBROUTINES IN THIS MODULE CAN BE BROKEN DOWN INTO THREE
C   PARTS.
C
C  1) INITIALISATION ROUTINES         2) DEFINITION OF D.A.E.S
C
C      ----------                        ------------
C      ! INICHB !                        ! PDECHB   !
C      ----------                        ------------
C          !                              !      !  !
C      ----------           ----------------     !  ----------
C      !  CSET  !           ! DRES OR CRES !     !  ! CHINTR !
C      ----------           ----------------     !  ----------
C          !                   !      !          !
C      ----------       ----------  ---------   ----------
C      ! UVINIT !       ! SPDEFN !  ! SBNDR !   ! SODEFN !
C      ----------       ----------  ---------   ----------
C
C       THE FOUR BOTTOM LEVEL ROUTINES ARE THE USER DEFINED PROBLEM
C       DEFINITION ROUTINES.
C
C     3) POST PROCESSING (SPACE INTERPOLATION ).
C
C       ----------
C       ! INTERC !    THIS ROUTINE CAN BE CALLED BY THE USER.
C       ----------
C           !
C       ----------
C       ! INTRCH !    SYSTEM INTERPOLATION ROUTINE ONLY.
C       ----------
C
C     4) ERROR MESSAGE HANDLER
C        ALL THE ABOVE ROUTINES MAY CALL A GENERAL ERROR MESSAGE
C        HANDLING ROUTINE CALLED
C                   ----------
C                   ! SCHERR !
C                   ----------
C
C     5) OPTIONAL ERROR CALCULATION ROUTINE FOR ANALYTIC SOLUTION
C        PROBLEMS IN THIS CASE THE USER MAY CALL AN ERROR CALCULATION
C        ROUTINE CALLED  ERROR WHICH IN TURN CALLS A USER DEFINED
C        ROUTINE TO SUPPLY THE ANALYTIC SOLUTION (MUST BE NAMED EXACT)
C                   ----------
C                   ! ERROR  !
C                   ----------
C                       !
C                   ----------
C                   ! EXACT  !
C                   ----------
C----------------------------------------------------------------------
C
C  INTERFACES TO THE INDIVIDUAL ROUTINES NOW FOLLOW IN THE FOLLOWING
C  ORDER
C   (1) INICHB
C   (2) CSET
C   (3) PDECHB
C   (4) CHINTR
C   (5) INTERC
C   (6) INTRCH
C   (7) SCHERR
C   (8) ERROR
C       THE LAST ROUTINE IS A P.D.E. UTILITY TO EVALUATE THE P.D.E.
C       ERROR NORMS AND GRID ERRORS FOR PROBLEMS WITH ANALYTIC SOL.
C
C
C***********************************************************************
      SUBROUTINE INICHB(NEQN,NPDE,NPTS,X,U,WK,IWK,M,TS,IBAND,ITIME,XBK,
     *                  IBK,NEL,NPOLY,NV,NXI,XI,IDEV)
C***********************************************************************
C ROUTINE FOR INITIALISATION OF CHEBYSHEV GENERALIZED COLLOCATION METHOD
C
C  PARAMETER LIST
C ----------------
C  NEQN:          EMPTY ON ENTRY, ON EXIT IT CONTAINS THE NUMBER OF
C                 O.D.E.S GENERATED BY THE DISCRETISED FORM OF THE
C                 P.D.E. , GIVEN BY  NPDE*NEL*(NPTL-1) + NPDE + NV.
C
C  NPDE           NUMBER OF PARABOLIC P.D.E.S IN ONE SPACE DIMENSION
C
C  NPTS           NUMBER OF SPATIAL GRID POINTS USED IN M.O.L. SOLUTION.
C                 NOTE THIS SHOULD BE EQUAL TO (NPTL-1)*NEL + 1
C
C  X(NPTS)        EMPTY ARRAY ON ENTRY . ON EXIT THIS ARRAY
C                 CONTAINS THE MESH USED IN SEMI-DISCRETISATION
C
C  M              =0,1,2 IF CARTESIAN CYLINDRICAL OR SPHERICAL POLARS.
C
C  U(NEQN)        SOLUTION VECTOR  EMPTY ON ENTRY CONTAINS INITIAL
C                 VALUES ON EXIT. THIS ARRAY IS ORDERED AS FOLLOWS.
C                 U(1) - U(NPDE*NPTS)      P.D.E. SOLUTION COMPONENTS.
C                 U(NPDE*NPTS+1) - U(NEQN) O.D.E. COMPONENTS THAT ARE
C                 COUPLED TO THE P.D.E.
C
C  WK(IWK)        REAL WORKSPACE USED TO PASS FOUR MATRICES AND VARIOUS
C                 USEFUL VECTORS TO THE O.D.E.FUNCTION CALL ROUTINE
C                 RESID SEE BELOW FOR A DETAILED DESCRIPTION.
C
C   TS            STARTING LEVEL OF TIME INTEGRATION.
C
C   XBK(IBK)      REAL ARRAY OF BREAK POINTS  IBK = NEL +1  WHERE
C                 NEL IS THE NUMBER OF SPATIAL ELEMENTS.
C                      XBK(1) = XLEFT
C                      XBK(I) =< XBK(I+1)  I = 1,...,NEL .
C                      XBK(IBK) = XRIGHT.
C  NEL            THE NUMBER OF SPATIAL ELEMENTS , >= 1
C
C  NPOLY          THE DEGREE OF THE APPROXIMATING POLYNOMIAL USED
C                 BETWEEN EACH PAIR OF BREAKPOINTS .
C  ITIME          THIS MUST BE SET = 1 ON THE CALL OF THIS MODULE
C                 PRIOR TO THE DASSL  PACKAGE BEING CALLED.
C                 ONCE DASSL  HAS RETURNED THIS ROUTINE MAY BE CALLED
C                 WITH ITIME = 2 TO RECOVER THE SPATIAL MESH USED
C                 (THIS IS PLACED IN THE ARRAY X(NPTS) ).
C
C  NV             THE NUMBER OF AUXILARY O.D.E.S THAT ARE COUPLED TO
C                 THE P.D.E.
C  NXI            THE NUMBER OF COUPLING POINTS AT WHICH P.D.E. VALUES
C                 ARE USED TO DEFINE THE O.D.E.S
C
C  XI(NXI)        A VECTOR SPECIFYING THE POSITION OF THESE POINTS.
C                 NOTE THAT THESE POINTS MUST BE DISTINCT FROM THE
C                 BREAK - POINTS .
C
C  IDEV           NUMBER OF OUTPUT CHANNEL ON WHICH ERROR MESSAGES TO
C                 DO WITH THE COLLOCATION DISCRETISATION WILL APPEAR.
C
C---------------------------------------------------------------------
C   EIGHT IMPORTANT PARAMETERS ARE PASSED ACROSS FROM HERE IN
C   COMMON /SCHSZ1/ NNEL, NNPTL, NNPDE, NNPTS, MM, NNV, NNXI, NVST
C
C  NNEL  = NEL
C
C  NNPTL = NPTL = NPOLY + 1
C
C  NNPDE = NPDE     THE NUMBER OF P.D.E.S
C
C  NNPTS = NPTS     THE TOTAL NUMBER OF MESHPOINTS = NEL*(NPTL-1) + 1
C
C  MM = M           = 0,1,2 CARTESIAN, CYLINDRICAL OR SPHERICAL POLAR
C                           CO-ORDINATES IN USE.
C  NNV = NV         NUMBER OF AUXILLARY ODES
C
C  NNXI= NXI        THE NUMBER OF COUPLING POINTS
C
C  NVST             THE STARTING POINT OF THE ODE COMPONENTS IN THE
C                   SOLUTION VECTOR.
C----------------------------------------------------------------------
C
C     DETAILED DESCRIPTION OF WORKSPACE
C    -----------------------------------
C        THE WORKSPACE WK(IWK) IS USED TO PASS ARRAYS AND VECTORS TO
C        THE ROUTINES  RESID AND CHINTR.
C
C        SIZE  :  IWK MUST BE >= 2*NPTL*(NPTL+NEL+1) + 2 + NV +
C                                  NPDE*(7 * (NPTL + NXI) + 8)
C
C     STRUCTURE        NAME IN CODE   PURPOSE IN CODE IS TO HOLD
C     *********
C     WK(1)  -  WK(I2-1)  OMEGA     MATRIX OMEGA FOR MAPPING TO COEFFS
C     WK(I2) -  WK(I3-1)  DU        MATRIX DU FOR FORMING DUDX
C     WK(I3) -  WK(I4-1)  DUTEM     TEMPORARY WORK AREA
C     WK(I4) -  WK(I7-1)  XC        CHEBYSHEV POINTS IN (-1,1)
C     WK(I7) -  WK(I8-1)  BETA      BETA (NPDE,4)       ARRAY FOR B.C.S
C     WK(I8) -  WK(I9-1)  GAMMA     GAMMA(NPDE,4)       ARRAY FOR B.C.S.
C     WK(I9) -  WK(I10-1)  DUDX     DUDX(NPDE,NPTL)     !WORKSPACES
C     WK(I10)-  WK(I11-1)   RT      R(3*NPDE,NPTS)      !USED INSIDE
C     WK(I11)-  WK(I12-1)   QT      Q(3*NPDE,NPTS)      !ROUTINE CRES
C     WK(I12)-  WK(I13-1)   CCR     COEFFS OF CLENSHAW CURTIS RULE OF
C                                   DEGREE NPTL-1.
C     ---------------------THE FOLLOWING PARTS OF THE WORKSPACE ARE USED
C                          IN SEMI-DISCRETISING MIXED O.D.E./P.D.E.
C                          PROBLEMS.
C     WK(I13)-  WK(I14-1) UI        ARRAY UI(NPDE,NXI) USED TO HOLD THE
C                                   PDE COMPONENTS AT THE COUPLING PTS .
C     WK(I14)-  WK(I15-1) UXI       SPACE DERIVS CORRESS TO ARRAY UI.
C     WK(I15)-  WK(I16-1) RI        FLUX CORRESS TO UI ARRAY
C     WK(I16)-  WK(I17-1) UTI       TIME DERIV CORRESS TO UI ARRAY.
C     WK(I17)-  WK(I18-1) UTXI      SPACE DERIV OF ARRAY UTI.
C     WK(I18)-  WK(I19-1) XI        COUPLING POINTS TO LINK PDE TO ODE.
C     WK(I19)-  WK(I20)   VDUM      ARRAY OF ZEROES.
C
C     --------------------THE FOLLOWING TWO PARTS OF WK HOLD THE MESH
C                         POINT INFORMATION USED IN SEMI-DISCRETISATION.
C     WK(I5) -  WK(I6-1)  XBK(IBK)  BREAKPOINTS USED BY THE CODE
C     WK(I6) -  WK(I13)   X(NPTS)   SPATIAL MESH POINTS USED BY THE CODE
C
C   THE ARRAYS BETA AND GAMMA ARE USED IN THE FORMATION OF THE
C   BOUNDARY CONDITIONS. THE ARRAYS DUDX R AND Q HOLD THE TEMPORARY
C   VARIABLES NEEDED IN THE CONSTRUCTION OF THE RESIDUAL OF THE O.D.E.
C   SYSTEM.
C   NOTE ; THE MESH POINTS AND BREAK POINTS ARE STORED AT THE END OF THE
C   *****  WORKSPACE WK SO THAT THE BREAK POINTS MAY BE INCREASED OR
C          DECREASED BY A MESH MODIFICATION ROUTINE. IN SUCH CASES THE
C          MESH POINTS MUST BE RECOMPUTED AS THEY ARE THE CHEBYSHEV
C          POINTS IN  (-1,1) MAPPED ONTO THE INTERVAL. THE CODE TO DO
C          THIS IS GIVEN BY
C          DO 10 I = 1, NEL
C             H1 = XBK(I+1) - XBK(I)
C             H2 = XBK(I=1) + XBK(I)
C             DO 10 J = 1, NPTL
C                IJ = (I-1)*(NPTL -1) + J
C      10        X(IJ) = (XC(J)) * H1 + H2) * 0.5D0
C         WHERE THE VALUES OF XBK AND XC MUST BE EXTRACTED FROM THE
C         WORKSPACE AND THE NEW VALUES OF X PUT IN THE WORKSPACE.
C
C   THE PARAMETERS I2,...,I20  ARE DEFINED BELOW.
C
C**********************************************************************
C     .. Scalar Arguments ..
      DOUBLE PRECISION  TS
      INTEGER           IBAND, IBK, IDEV, ITIME, IWK, M, NEL, NEQN,
     *                  NPDE, NPOLY, NPTS, NV, NXI
C     .. Array Arguments ..
      DOUBLE PRECISION  U(1), WK(IWK), X(NPTS), XBK(IBK), XI(1)
C     .. Scalars in Common ..
      DOUBLE PRECISION  TO, TWOU
      INTEGER           I10, I10A, I10B, I11, I11A, I11B, I12, I13, I14,
     *                  I15, I16, I17, I18, I19, I2, I3, I4, I5, I6, I7,
     *                  I8, I9, ILOC, INDEV, JTIMES, K1, K2, K3, K4, MM,
     *                  NNEL, NNNPTL, NNPDE, NNPTL, NNPTS, NNV, NNXI,
     *                  NVST
      CHARACTER*6       PDCODE
C     .. Local Scalars ..
      DOUBLE PRECISION  TEMP, TEMP2
      INTEGER           I, I20, IBKM1, IT, IV, J, NPTL, NSQ
      CHARACTER*240     ERRMSG
C     .. External Subroutines ..
      EXTERNAL          CSET, SCHERR
C     .. Intrinsic Functions ..
      INTRINSIC         DABS, DMAX1
C     .. Common blocks ..
      COMMON            /DISCHK/PDCODE
      COMMON            /SCHSZ/I2, I3, I4, I5, I6, I7, I8, I9, I10,
     *                  I10A, I10B, I11, I11A, I11B, I12, I13, I14, I15,
     *                  I16, I17, I18, I19
      COMMON            /SCHSZ1/NNEL, NNPTL, NNPDE, NNPTS, MM, NNV,
     *                  NNXI, NVST
      COMMON            /SCHSZ2/INDEV
      COMMON            /SCHSZ3/TWOU
      COMMON            /SCHSZ4/TO, K1, K2, K3, K4, JTIMES, ILOC
      COMMON            /SCHSZ5/NNNPTL
C     .. Save statement ..
      SAVE              /SCHSZ1/, /SCHSZ/, /DISCHK/, /SCHSZ2/, /SCHSZ3/,
     *                  /SCHSZ4/, /SCHSZ5/
C     .. Executable Statements ..
      INDEV = IDEV
      IF (ITIME.LT.1 .OR. ITIME.GT.2) THEN
         ERRMSG =
     *' INICHB DETECTED THAT THE SUPPLIED VALUE OF ITIME        (VALUE =
     * I1 ) IS NOT IN THE RANGE ONE TO TWO '
         CALL SCHERR(ERRMSG,1,1,ITIME,0,0,0.0D0,0.0D0)
         ITIME = -1
         RETURN
      END IF
      IF (ITIME.EQ.2 .AND. PDCODE.EQ.'C0CHEB') GO TO 140
      PDCODE = 'C0CHEB'
      TO = TS
      ILOC = -1
      MM = M
      NNPDE = NPDE
      NPTL = NPOLY + 1
      IF (NPOLY.LT.2 .OR. NPOLY.GT.49) THEN
         ERRMSG =
     *' INICHB ROUTINE DETECTED THAT THE SUPPLIED VALUE         OF NPOLY
     * WAS (= I1 ) WHICH IS LESS THAN TWO OR GREATER THAN 49'
         CALL SCHERR(ERRMSG,1,1,NPOLY,0,0,0.0D0,0.0D0)
         ITIME = -1
      END IF
      NNPTS = (NPTL-1)*NEL + 1
      IF (NPTS.NE.NNPTS) THEN
         ERRMSG =
     *' INCORRECT VALUE OF NPTS (=I1) SUPPLIED IN CALL TO
     *  INICHB. THE VALUE SHOULD BE (=I2)'
         CALL SCHERR(ERRMSG,1,2,NPTS,NNPTS,0,0.0D0,0.0D0)
         ITIME = -1
      END IF
      NNEL = NEL
      NNPTL = NPTL
      NNV = NV
      NNXI = NXI
      NVST = NPDE*NPTS + 1
      NEQN = NPDE*NPTS + NV
      IF (NV.GT.0) THEN
         IBAND = NEQN - 1
      ELSE
         IBAND = (NPTL)*NPDE - 1
      END IF
      IF (IBK.NE.(NEL+1)) THEN
         ERRMSG =
     *' INCORRECT VALUE OF IBK (=I1) SUPPLIED IN CALL TO
     *  INICHB. THE VALUE SHOULD BE (=I2) PLUS 1'
         CALL SCHERR(ERRMSG,1,2,IBK,NEL,0,0.0D0,0.0D0)
         ITIME = -1
      END IF
      X(1) = XBK(1)
      X(NPTS) = XBK(IBK)
      ITIME = 1
      IF (X(NPTS).LE.X(1)) THEN
         ERRMSG =
     *' INICHB ROUTINE FOUND THAT THE LAST BREAK-POINT          (=R1) HA
     *S BEEN PLACED BEFORE THE FIRST BREAK-POINT (= R2)'
         CALL SCHERR(ERRMSG,1,0,0,0,2,X(NPTS),X(1))
         ITIME = -1
         RETURN
      END IF
      IF (NEL.LT.1) THEN
         ERRMSG =
     *' INICHB ROUTINE - HAS DETECTED THAT THE                  SUPPLIED
     * VALUE OF NEL ( = I1 ) WHICH IS ILLEGAL '
         CALL SCHERR(ERRMSG,1,1,NEL,0,0,0.0D0,0.0D0)
         ITIME = -1
         RETURN
      END IF
      I = NEL*(NPTL-1) + 1
      IF (I.NE.NPTS) THEN
         ERRMSG =
     *' INIT FOR C0 COLLOC- VALUES OF NEL AND NPTL FORM A       MESH OF
     *(=I1) POINTS BUT NPTS IS SET TO ( =I2)'
         CALL SCHERR(ERRMSG,1,2,I,NPTS,0,0.0D0,0.0D0)
         ITIME = -1
         RETURN
      END IF
      DO 20 I = 2, IBK
         IF (XBK(I).LE.XBK(I-1)) THEN
            ERRMSG =
     *' INICHB - BREAKPOINT NO (=I1) HAS VALUE (=R1)            WHICH IS
     * SMALLER THAN OR EQUAL TO BREAKPOINT NO I1-1              WITH VAL
     *UE (=R2)'
            CALL SCHERR(ERRMSG,1,1,I,0,2,XBK(I),XBK(I-1))
            ITIME = -1
            RETURN
         END IF
   20 CONTINUE
C
C   CALCULATE ROUGH ESTIMATE OF UNIT ROUND-OFF ERROR FOR CHECKING
C
      TWOU = 0.1D0
   40 TEMP = 1.0D0 + TWOU
      IF (1.0D0.EQ.TEMP) THEN
         TWOU = TWOU*2.0D0
      ELSE
         TWOU = TWOU*0.5D0
         GO TO 40
      END IF
C
C  CHECK IF THE BREAK-POINTS MATCH THE COUPLING POINTS.
C
      IF (IBK.GT.2 .AND. NXI.GT.0) THEN
         IBKM1 = IBK - 1
         DO 80 I = 2, IBKM1
            DO 60 J = 1, NXI
               TEMP = DABS(XI(J)-XBK(I))
               TEMP2 = TWOU/DMAX1(TEMP,1.0D0)
               IF (TEMP.LT.TEMP2) THEN
C                 COUPLING POINT IS TOO CLOSE TO BREAK-POINT
                  ERRMSG =
     *' INICHB ROUTINE HAS FOUND THAT COUPLING                  POINT (=
     *I1) HAS VALUE (=R1) WHICH IS VERY CLOSE TO                BREAK-PO
     *INT (=I2) WITH VALUE (=R2)'
                  CALL SCHERR(ERRMSG,1,2,J,I,2,XI(J),XBK(I))
               END IF
   60       CONTINUE
   80    CONTINUE
      END IF
*
C
C  FORM INTEGER CONSTANTS FOR WKSPACE MANIPULATION
C
      NSQ = NPTL*NPTL
      IT = NPDE*NXI
      I2 = NSQ + 1
      I3 = I2 + NSQ
      I4 = I3 + NSQ
      I7 = I4 + NPTL
      I8 = I7 + NPDE*4
      I9 = I8 + NPDE*4
      I10 = I9 + NPDE*NPTL
      I11 = I10 + NPDE*NPTL*3
      I12 = I11 + NPDE*NPTL*3
      I13 = I12 + NPTL
      I14 = I13 + IT
      I15 = I14 + IT
      I16 = I15 + IT
      I17 = I16 + IT
      I18 = I17 + IT
      I19 = I18 + NXI
      I5 = I19 + NV
      I6 = I5 + NEL + 1
      I20 = I6 + NEL*(NPTL-1) + 1
      I10A = I10 + NPDE*NPTL
      I10B = I10A + NPDE*NPTL
      I11A = I11 + NPDE*NPTL
      I11B = I11A + NPDE*NPTL
      K1 = 1
      K2 = K1 + NEQN
      K3 = K2 + NEQN
      K4 = K3 + NEQN
      IF (I20.GT.IWK) THEN
         ERRMSG =
     *' INICHB-ROUTINE WORKSPACE OF SIZE (=I1) IS LESS          THAN REQ
     *UIRED SIZE (=I2)'
         CALL SCHERR(ERRMSG,1,2,IWK,I20,0,0.0D0,0.0D0)
         ITIME = -1
         RETURN
      END IF
      IV = NPDE*NPTS
      IF (NV.GT.0) THEN
         IV = NVST
C        COPY ACROSS THE COUPLING POINTS
         DO 100 I = 1, NXI
            WK(I18+I-1) = XI(I)
  100    CONTINUE
         DO 120 I = 2, NXI
            IF (XI(I).LE.XI(I-1)) THEN
               ERRMSG =
     *' INICHB WARNING THE ODE/PDE COUPLING POINTS              COUPLING
     * POINTS ARE NOT IN STRICTLY INCREASING ORDER'
               CALL SCHERR(ERRMSG,1,0,0,0,0,0.0D0,0.0D0)
            END IF
  120    CONTINUE
      END IF
C
      CALL CSET(NPDE,NPTS,U,WK(I6),WK,WK(I2),WK(I5),NEL,NPTL,WK(I4),
     *          WK(I12),XBK,IBK,WK(I3),U(IV),NV)
C
  140 DO 160 I = 1, NPTS
         X(I) = WK(I6+I-1)
  160 CONTINUE
      NNNPTL = NPTL
      RETURN
      END
      SUBROUTINE CSET(NPDE,NPTS,U,X,OMEGA,DU,XBK,NEL,NPTL,XC,CCR,XBH,
     *                IBK,DUTEM,V,NV)
C***********************************************************************
C       FORTRAN FUNCTIONS USED:  SIN COS .
C***********************************************************************
C     .. Scalar Arguments ..
      INTEGER         IBK, NEL, NPDE, NPTL, NPTS, NV
C     .. Array Arguments ..
      DOUBLE PRECISIONCCR(NPTL), DU(NPTL,NPTL), DUTEM(NPTL,NPTL),
     *                OMEGA(NPTL,NPTL), U(NPDE,NPTS), V(1), X(NPTS),
     *                XBH(IBK), XBK(IBK), XC(NPTL)
C     .. Arrays in Common ..
      DOUBLE PRECISIONCCRULE(50)
C     .. Local Scalars ..
      DOUBLE PRECISIONH1, H2, PI, SINT, SUM, TEMP
      INTEGER         I, IJ, ITEM, J, K, NM1, NT, NTP1
C     .. External Subroutines ..
      EXTERNAL        UVINIT
C     .. Intrinsic Functions ..
      INTRINSIC       DBLE, DCOS, DSIN
C     .. Common blocks ..
      COMMON          /SCHSZ6/CCRULE
C     .. Save statement ..
      SAVE            /SCHSZ6/
C     .. Executable Statements ..
C
C  FORM  CONSTANTS FOR WKSPACE INITIALISATION
C
      NM1 = NPTL - 1
      PI = 3.1415926535897930D0
C
C  FORMATION OF GRID AND INITIAL VALUES OF U
C
      DO 40 I = 1, NEL
         H1 = XBH(I+1) - XBH(I)
         H2 = XBH(I+1) + XBH(I)
         XBK(I) = XBH(I)
         DO 20 J = 1, NPTL
            IJ = (I-1)*NM1 + J
            IF (I.EQ.1) XC(J) = DCOS(PI*DBLE(J-NPTL)/NM1)
            X(IJ) = (XC(J)*H1+H2)*0.5D0
            IF (J.EQ.1) X(IJ) = XBH(I)
            IF (J.EQ.NPTL) X(IJ) = XBH(I+1)
   20    CONTINUE
   40 CONTINUE
      XBK(IBK) = XBH(IBK)
      XC(1) = -1.0D0
      XC(NPTL) = 1.0D0
C
C  FORM THE MATRIX OMEGA
C
      DO 80 J = 1, NPTL
         DO 60 I = 1, NPTL
            OMEGA(I,J) = 2.D0*DCOS(PI*(I-1)*(NPTL-J)/NM1)/NM1
   60    CONTINUE
   80 CONTINUE
C
C   MODIFY EDGES OF OMEGA AND FORM EDGES OF INTERMEDIATE DU MATRIX
C
      ITEM = 1
      DO 100 I = 1, NPTL
         OMEGA(I,1) = OMEGA(I,1)*0.5D0
         OMEGA(1,I) = OMEGA(1,I)*0.5D0
         OMEGA(NPTL,I) = OMEGA(NPTL,I)*0.5D0
         OMEGA(I,NPTL) = OMEGA(I,NPTL)*0.5D0
         DUTEM(I,1) = 0.0D0
         DUTEM(1,I) = -DBLE((I-1)**2*ITEM)
         DUTEM(NPTL,I) = DBLE((I-1)**2)
         ITEM = -ITEM
  100 CONTINUE
C
C FINISH FORMING REST OF INTERMEDIATE DU MATRIX THAT IS HELD IN DUTEM.
C
      IF (NPTL.GT.2) THEN
         DO 140 I = 2, NM1
            TEMP = PI*(I-NPTL)/NM1
            SINT = DSIN(TEMP)
            DO 120 J = 2, NM1
               DUTEM(I,J) = DSIN(TEMP*(J-1))/SINT*(J-1)
  120       CONTINUE
            DUTEM(I,NPTL) = 0.0D0
  140    CONTINUE
      END IF
C
C  FORM FULL DU BY MATRIX MULTIPLICATION
C
      DO 200 I = 1, NPTL
         DO 180 J = 1, NPTL
            DU(I,J) = 0.0D0
            DO 160 K = 1, NPTL
               DU(I,J) = DU(I,J) + DUTEM(I,K)*OMEGA(K,J)
  160       CONTINUE
  180    CONTINUE
  200 CONTINUE
C
C        CALCULATE THE COEFFS OF THE CLENSHAW CURTIS RULE
C
      NT = NM1/2
      IF ((2*NT).NE.NM1) NT = (NM1-1)/2
      NTP1 = NT + 1
      SUM = 0.0D0
      DO 240 I = 1, NPTL
         TEMP = 0.5D0
         CCR(I) = 0.0D0
         DO 220 K = 1, NTP1
            IF (K.EQ.NTP1 .AND. ((2*NT).EQ.NM1)) TEMP = 0.5D0
            CCR(I) = CCR(I) + DCOS(2.0D0*(I-1)*(K-1)*PI/NM1)
     *               *TEMP/(4.0D0*(K-1)**2-1.0D0)
            TEMP = 1.0D0
  220    CONTINUE
         IF (I.EQ.1 .OR. I.EQ.NPTL) TEMP = 0.5D0
         CCR(I) = CCR(I)*(-4.0D0)*TEMP/NM1
         SUM = SUM + CCR(I)
  240 CONTINUE
      DO 260 I = 1, NPTL
         CCRULE(I) = CCR(I)
  260 CONTINUE
      DO 280 I = 2, NM1
         CCR(I) = CCR(I)/CCR(1)
  280 CONTINUE
C  FIND THE INITIAL VALUES OF THE O.D.E. AND P.D.E. COMPONENTS.
      CALL UVINIT(NPDE,NPTS,X,U,NV,V)
      RETURN
C
C-----------END  OF  CSET ROUTINE---------------------------------------
C
      END
      SUBROUTINE PDECHB(T,U,UDOT,RESD,IRES,WK,IWK)
C***********************************************************************
C
C THIS IS THE CHEBYSHEV GLOBAL ELEMENT ROUTINE TO EVALUATE THE
C RESIDUAL OF THE IMPLICIT SET OF O.D.E.'S DEFINED BY
C
C        RESIDUAL  =  A(U,T)*DU/DT  -  F(U,T)
C
C PARAMETER LIST
C----------------
C  T               CURRENT TIME INTEGRATION LEVEL , > 0.0
C  U(N)            CURRENT SOLUTION VECTOR
C  RESD(N)          VECTOR WHICH WILL CONTAIN THE RESIDUAL ON EXIT
C  UDOT(N)         CURRENT ESTIMATE OF DU/DT
C  WK(1)           REAL WORKSPACE - DEFINED IN INICHB
C  IWK(1)          INTEGER WORKSPACE - NOT USED HERE.
C  IRES            INDICATOR FOR DASSL FROM RESIDUAL ROUTINE.
C                  ON EXIT = -1 THEN ILLEGAL SOLUTION VALUES HAVE BEEN
C                               FOUND .
C                           =-2 DASSL SHOULD HALT THE INTEGRATION.
C
C  ONLY  RESD(N) IS ALTERED ON EXIT : IT CONTAINS THE CURRENT RESIDUAL
C***********************************************************************
C     .. Scalar Arguments ..
      DOUBLE PRECISION  T
      INTEGER           IRES
C     .. Array Arguments ..
      DOUBLE PRECISION  RESD(1), U(1), UDOT(1), WK(1)
      INTEGER           IWK(1)
C     .. Scalars in Common ..
      INTEGER           I10, I10A, I10B, I11, I11A, I11B, I12, I13, I14,
     *                  I15, I16, I17, I18, I19, I2, I3, I4, I5, I6, I7,
     *                  I8, I9, M, NEL, NPDE, NPTL, NPTS, NV, NVST, NXI
      CHARACTER*6       PDCODE
C     .. Local Scalars ..
      INTEGER           I, IBK, IFL, IR, ITYPE, IV, J, N
      CHARACTER*240     ERRMSG
C     .. External Subroutines ..
      EXTERNAL          CHINTR, CRES, DRES, SCHERR, SODEFN
C     .. Common blocks ..
      COMMON            /DISCHK/PDCODE
      COMMON            /SCHSZ/I2, I3, I4, I5, I6, I7, I8, I9, I10,
     *                  I10A, I10B, I11, I11A, I11B, I12, I13, I14, I15,
     *                  I16, I17, I18, I19
      COMMON            /SCHSZ1/NEL, NPTL, NPDE, NPTS, M, NV, NXI, NVST
C     .. Save statement ..
      SAVE              /SCHSZ1/, /SCHSZ/, /DISCHK/
C     .. Executable Statements ..
C
      IF (PDCODE.NE.'C0CHEB') THEN
         ERRMSG =
     *' C0CHEB-RES ROUTINE ERROR-THE SETUP ROUTINE INICHB       WAS NOT
     *CALLED BEFORE DASSL  WAS ENTERED'
         CALL SCHERR(ERRMSG,1,0,0,0,0,0.0D0,0.0D0)
         IRES = -2
         RETURN
      END IF
C
      IR = 1
      IRES = 1
      N = NPDE*NPTS + NV
      DO 20 J = 1, N
         RESD(J) = 0.0D0
   20 CONTINUE
      IBK = NEL + 1
      IV = NPTS*NPDE
      IF (NV.GT.0) THEN
         IV = NVST
C        GENERATE THE SOLUTION VALUES SPACE DERIVS AND FLUXES AT THE
C        COUPLING POINTS
         ITYPE = 3
         IFL = 0
         CALL CHINTR(NXI,WK(I18),WK(I13),ITYPE,U,NPTS,NPDE,NEL,NPTL,WK,
     *               WK(I10),WK(I5),IBK,IFL,NV,U(IV),UDOT(IV),WK(I11),T,
     *               IR)
         IF (IR.NE.1 .OR. IFL.EQ.1) GO TO 60
C        GENERATE TIME DERIV VALUES AND THEIR SPACE DERIVS AT THE
C        COUPLING POINTS.
         ITYPE = 2
         CALL CHINTR(NXI,WK(I18),WK(I16),ITYPE,UDOT,NPTS,NPDE,NEL,NPTL,
     *               WK,WK(I10),WK(I5),IBK,IFL,NV,U(IV),UDOT(IV),WK(I11)
     *               ,T,IR)
         IF (IR.NE.1 .OR. IFL.EQ.1) GO TO 60
C        CALL THE ROUTINE TO DEFINE THE AUXILLARY ODE RESIDUAL.
         CALL SODEFN(T,NV,U(IV),UDOT(IV),NPDE,NXI,WK(I18),WK(I13),
     *               WK(I14),WK(I15),WK(I16),WK(I17),RESD(IV),IRES)
         IF (IRES.NE.1) GO TO 60
      END IF
C       CALL THE CO COLLOCATION DISCRETISATION ROUTINE
      IR = 1
      IF (NPTL.GT.2) THEN
C        GENERAL POLYNOMIAL VERSION.
         CALL CRES(NPDE,NPTS,T,U,RESD,UDOT,M,WK(I6),WK,WK(I2),WK(I5),
     *             WK(I7),WK(I8),WK(I9),WK(I10),WK(I11),NEL,NPTL,WK(I4),
     *             WK(I12),IRES,WK(I10A),WK(I11A),WK(I11B),WK(I10B),NV,
     *             U(IV),UDOT(IV),WK(I19))
      ELSE
C        LINEAR BASIS FUNCTION VERSION.
         CALL DRES(NPDE,NPTS,T,U,RESD,UDOT,M,WK(I6),WK,WK(I2),WK(I5),
     *             WK(I7),WK(I8),WK(I9),WK(I10),WK(I11),NEL,NPTL,WK(I4),
     *             WK(I12),IRES,WK(I10A),WK(I11A),WK(I11B),WK(I10B),NV,
     *             U(IV),UDOT(IV),WK(I19))
      END IF
      DO 40 I = 1, N
         RESD(I) = -RESD(I)
   40 CONTINUE
      IF (IRES.NE.1) THEN
         IR = IRES
         GO TO 60
      END IF
      RETURN
   60 IRES = IR
      IF (IR.EQ.-2) THEN
         ERRMSG =
     *' ROUTINE PDECHB AT TIME T (=R1). THE VALUE OF IRES
     * HAS BEEN SET TO -2 TO TERMINATE INTEGRATION.'
         CALL SCHERR(ERRMSG,1,0,0,0,1,T,0.0D0)
      ELSE IF (IR.NE.-1) THEN
         ERRMSG =
     *' ROUTINE PDECHB AT TIME T (=R1). THE
     *  VALUE OF IRES HAS BEEN SET TO AN ILLEGAL VALUE (=I1).
     *PDECHB HAS RESET IRES TO -1 AND INTEGRATION CONTINUES.'
         CALL SCHERR(ERRMSG,1,0,0,0,1,T,0.0D0)
         IRES = -1
      END IF
      RETURN
C
C---------------------------END OF PDECHB-----------------------------
C
      END
      SUBROUTINE CRES(NPDE,NPTS,T,U,RES,UDOT,M,X,OMEGA,DU,XBK,BETA,
     *                GAMMA,DUDX,R,Q,NEL,NPTL,XC,CCR,IRES,RT,QT,UDT,
     *                UTDX,NV,V,VDOT,VDUM)
C**********************************************************************
C       CHEBYSHEV C0 COLLOCATION SPATIAL DISCRETISATION ROUTINE
C       FOR POLYNOMIALS OF DEGREE 2 AND ABOVE.
C**********************************************************************
C     .. Scalar Arguments ..
      DOUBLE PRECISIONT
      INTEGER         IRES, M, NEL, NPDE, NPTL, NPTS, NV
C     .. Array Arguments ..
      DOUBLE PRECISIONBETA(NPDE,4), CCR(NPTL), DU(NPTL,NPTL),
     *                DUDX(NPDE,NPTL), GAMMA(NPDE,4), OMEGA(NPTL,NPTL),
     *                Q(NPDE,NPTL), QT(NPDE,NPTL), R(NPDE,NPTL),
     *                RES(NPDE,NPTS), RT(NPDE,NPTL), U(NPDE,NPTS),
     *                UDOT(NPDE,NPTS), UDT(NPDE,NPTL), UTDX(NPDE,NPTL),
     *                V(1), VDOT(1), VDUM(1), X(NPTS), XBK(1), XC(NPTL)
C     .. Scalars in Common ..
      DOUBLE PRECISIONTWOU
C     .. Local Scalars ..
      DOUBLE PRECISIONH, MP1, SAVEL, SAVER, SFIRST
      INTEGER         I, II, IJ, IK, IV, J, JJ, JK, K, KJ, NM1
C     .. Local Arrays ..
      INTEGER         IZ(3)
C     .. External Subroutines ..
      EXTERNAL        SBNDR, SPDEFN
C     .. Intrinsic Functions ..
      INTRINSIC       MAX0, MIN0
C     .. Common blocks ..
      COMMON          /SCHSZ3/TWOU
C     .. Save statement ..
      SAVE            /SCHSZ3/
C     .. Executable Statements ..
      NM1 = NPTL - 1
      IV = MAX0(1,NV)
      MP1 = 1.0D0
      DO 260 I = 1, NEL
         JJ = (I-1)*NM1
         IJ = JJ + 1
         H = 2.0D0/(XBK(I+1)-XBK(I))
         DO 20 IK = 1, 3
            IZ(IK) = 1
   20    CONTINUE
C        ***************************************************************
C        MAIN LOOP OVER ALL THE SPATIAL ELEMENTS START BY
C        FORMING THE SPACE DERIVS OF U AND UDOT IN DUDX AND UTDX
C        RESPECTIVELY.
C        **************************************************************
         DO 80 K = 1, NPDE
            DO 60 II = 1, NPTL
               DUDX(K,II) = 0.0D0
               UTDX(K,II) = 0.0D0
               DO 40 J = 1, NPTL
                  UTDX(K,II) = UTDX(K,II) + DU(II,J)*UDOT(K,JJ+J)*H
                  DUDX(K,II) = DUDX(K,II) + DU(II,J)*U(K,JJ+J)*H
   40          CONTINUE
   60       CONTINUE
   80    CONTINUE
C        ---------------------------------------------------------------
C        EVALUATE THE FUNCTIONS Q AND R IN THIS ELEMENT
C        --------------------------------------------------------------
         CALL SPDEFN(T,X(IJ),NPTL,NPDE,U(1,IJ),DUDX,UDOT(1,IJ),UTDX,Q,R,
     *               IV,V,VDOT,IZ(1))
         IF (M.GT.0) THEN
C           MODIFY Q FUNCTION IF POLAR CO-ORDINATES
            KJ = 1
            IF (X(IJ).LE.TWOU) THEN
               MP1 = 1.0D0 + M
               KJ = 2
               DO 100 K = 1, NPDE
C                 R(K,1) = 0.0D0
                  Q(K,1) = Q(K,1)/(M+1)
  100          CONTINUE
            END IF
            DO 140 J = KJ, NPTL
               DO 120 K = 1, NPDE
                  Q(K,J) = Q(K,J) - R(K,J)*M/X(JJ+J)
  120          CONTINUE
  140       CONTINUE
         END IF
C        **************************************************************
C        FORM THE FUNCTIONS BETA AND GAMMA IN THE BOUNDARY CONDITIONS
C        **************************************************************
         IF (I.EQ.1) THEN
C           LEFT HAND BOUNDARY CONDITIONS
            CALL SBNDR(T,BETA(1,1),GAMMA(1,1),U(1,1),DUDX,UDOT(1,1),
     *                 UTDX,NPDE,.TRUE.,IV,V,VDOT,IZ(2))
            IF (IZ(2).NE.1) IRES = IZ(2)
         END IF
         IF (I.EQ.NEL) THEN
C           RIGHT HAND BOUNDARY CONDITIONS
            CALL SBNDR(T,BETA(1,2),GAMMA(1,2),U(1,NPTS),DUDX(1,NPTL),
     *                 UDOT(1,NPTS),UTDX(1,NPTL),NPDE,.FALSE.,IV,V,VDOT,
     *                 IZ(3))
            IF (IZ(3).NE.1) IRES = IZ(3)
         END IF
C        ---------------------------------------------------------------
C        SET UP SAVEL AND SAVER  FOR THE BOUNDARY AND INTERFACE
C        CONDITIONS AND FORM DRDX  BY OVERWRITING DUDX
C        --------------------------------------------------------------
         KJ = MAX0(2,I)
         JK = MIN0(NEL,I+1) + 1
         SAVEL = 1.0D0/(XBK(KJ)+XBK(I+1)-XBK(KJ-1)-XBK(I))
         SAVER = 1.0D0/(XBK(JK)+XBK(I+1)-XBK(JK-1)-XBK(I))
         IF (I.EQ.1) SFIRST = SAVEL
         DO 200 K = 1, NPDE
            DO 180 II = 1, NPTL
               DUDX(K,II) = 0.0D0
               DO 160 J = 1, NPTL
                  DUDX(K,II) = DUDX(K,II) + DU(II,J)*R(K,J)
  160          CONTINUE
  180       CONTINUE
  200    CONTINUE
C        ---------------------------------------------------------------
C         FORM THE RESIDUAL AND THE INTERFACE CONDITIONS
C        --------------------------------------------------------------
         DO 240 J = 1, NPDE
            DO 220 K = 2, NM1
C              COLLOCATION AT INTERIOR POINT
               RES(J,JJ+K) = Q(J,K) - DUDX(J,K)*H
  220       CONTINUE
            JK = IJ + NM1
            RES(J,IJ) = RES(J,IJ) + ((Q(J,1)/H-DUDX(J,1)-R(J,1)/CCR(1))
     *                  *2.0)*SAVEL
            RES(J,JK) = ((Q(J,NPTL)/H-DUDX(J,NPTL)+R(J,NPTL)/CCR(1))
     *                  *2.0)*SAVER
  240    CONTINUE
C        TEST TO SEE IF ILLEGAL SOLUTION VALUES HAVE BEEN FOUND.
         IF (IZ(1).NE.1) THEN
            IRES = IZ(1)
            GO TO 300
         END IF
  260 CONTINUE
C
C                             PROCESS THE BOUNDARY CONDITIONS
      DO 280 J = 1, NPDE
C        L.H.--BOUNDARY CONDITION IS PROCESSED
         RES(J,1) = MP1*(RES(J,1)*BETA(J,1)*2.0D0+GAMMA(J,1)
     *              *4.0D0/CCR(1)*SFIRST)
C        R.H.---BOUNDARY CONDITION IS PROCESSED
         RES(J,NPTS) = RES(J,NPTS)*BETA(J,2)*2.0D0 - GAMMA(J,2)
     *                 *4.0D0/CCR(1)*SAVER
  280 CONTINUE
  300 CONTINUE
      RETURN
C-------END OF CRES----------------------------------------------------
C
      END
      SUBROUTINE DRES(NPDE,NPTS,T,U,RES,UDOT,M,X,OMEGA,DU,XBK,BETA,
     *                GAMMA,DUDX,R,Q,NEL,NPTL,XC,CCR,IRES,RT,QT,UDT,
     *                UTDX,NV,V,VDOT,VDUM)
C**********************************************************************
C       CHEBYSHEV C0 COLLOCATION ROUTINE
C       THIS VERSION FOR USE WITH LINEAR BASIS FUNCTIONS ONLY
C**********************************************************************
C
C     .. Scalar Arguments ..
      DOUBLE PRECISIONT
      INTEGER         IRES, M, NEL, NPDE, NPTL, NPTS, NV
C     .. Array Arguments ..
      DOUBLE PRECISIONBETA(NPDE,4), CCR(NPTL), DU(NPTL,NPTL),
     *                DUDX(NPDE,NPTL), GAMMA(NPDE,4), OMEGA(NPTL,NPTL),
     *                Q(NPDE,NPTL), QT(NPDE,NPTL), R(NPDE,NPTL),
     *                RES(NPDE,NPTS), RT(NPDE,NPTL), U(NPDE,NPTS),
     *                UDOT(NPDE,NPTS), UDT(NPDE,NPTL), UTDX(NPDE,NPTL),
     *                V(1), VDOT(1), VDUM(1), X(NPTS), XBK(1), XC(NPTL)
C     .. Scalars in Common ..
      DOUBLE PRECISIONTWOU
C     .. Local Scalars ..
      DOUBLE PRECISIONH, MP1, SAVEL, SAVER, SFIRST, TEM
      INTEGER         I, II, IJ, IK, IV, J, JJ, JK, K, KJ, NM1
C     .. Local Arrays ..
      INTEGER         IZ(3)
C     .. External Subroutines ..
      EXTERNAL        SBNDR, SPDEFN
C     .. Intrinsic Functions ..
      INTRINSIC       MAX0, MIN0
C     .. Common blocks ..
      COMMON          /SCHSZ3/TWOU
C     .. Save statement ..
      SAVE            /SCHSZ3/
C     .. Executable Statements ..
      NM1 = NPTL - 1
      IV = MAX0(1,NV)
      MP1 = 1.0D0
      DO 220 I = 1, NEL
         JJ = (I-1)*NM1
         IJ = JJ + 1
         H = 2.0D0/(XBK(I+1)-XBK(I))
         DO 20 IK = 1, 3
            IZ(IK) = 1
   20    CONTINUE
C        ***************************************************************
C        MAIN LOOP OVER ALL THE SPATIAL ELEMENTS START BY FORMING THE
C        SPACE DERIVS OF U AND UDOT IN DUDX AND UTDX RESPECTIVELY.
C        **************************************************************
         DO 80 K = 1, NPDE
            DO 60 II = 1, NPTL
               DUDX(K,II) = 0.0D0
               UTDX(K,II) = 0.0D0
               DO 40 J = 1, NPTL
                  UTDX(K,II) = UTDX(K,II) + DU(II,J)*UDOT(K,JJ+J)*H
                  DUDX(K,II) = DUDX(K,II) + DU(II,J)*U(K,JJ+J)*H
   40          CONTINUE
   60       CONTINUE
   80    CONTINUE
C
         IF (I.EQ.1) THEN
C           SAVE THE VALUES NEEDED FOR LEFT BOUNDARY CONDITIONS
            DO 100 J = 1, NPDE
               BETA(J,3) = DUDX(J,1)
               BETA(J,4) = UTDX(J,1)
  100       CONTINUE
         END IF
         IF (I.EQ.NEL) THEN
C           SAVE THE VALUES NEEDED FOR RIGHT BOUNDARY CONDITIONS
            DO 120 J = 1, NPDE
               GAMMA(J,3) = DUDX(J,NPTL)
               GAMMA(J,4) = UTDX(J,NPTL)
  120       CONTINUE
         END IF
C        ---------------------------------------------------------------
C         EVALUATE THE FUNCTIONS Q AND R IN THIS ELEMENT
C        --------------------------------------------------------------
         CALL SPDEFN(T,X(IJ),NPTL,NPDE,U(1,IJ),DUDX,UDOT(1,IJ),UTDX,Q,R,
     *               IV,V,VDOT,IZ(1))
         IF (M.GT.0) THEN
C           MODIFY Q FUNCTION IF POLAR CO-ORDINATES
            KJ = 1
            IF (X(IJ).LE.TWOU) THEN
               MP1 = 1.0D0 + M
               KJ = 2
               DO 140 K = 1, NPDE
C                 R(K,1) = 0.0D0
                  Q(K,1) = Q(K,1)/(M+1)
  140          CONTINUE
            END IF
            DO 180 J = KJ, NPTL
               DO 160 K = 1, NPDE
                  Q(K,J) = Q(K,J) - R(K,J)*M/X(JJ+J)
  160          CONTINUE
  180       CONTINUE
         END IF
C        ---------------------------------------------------------------
C        SET UP SAVEL AND SAVER FOR BOUNDARY AND INTERFACE CONDITIONS
C        --------------------------------------------------------------
         KJ = MAX0(2,I)
         JK = MIN0(NEL,I+1) + 1
         SAVEL = 1.0D0/(XBK(KJ)+XBK(I+1)-XBK(KJ-1)-XBK(I))
         SAVER = 1.0D0/(XBK(JK)+XBK(I+1)-XBK(JK-1)-XBK(I))
         IF (I.EQ.1) SFIRST = SAVEL
C        ---------------------------------------------------------------
C         FORM THE RESIDUAL AND THE INTERFACE CONDITIONS
C        --------------------------------------------------------------
         DO 200 J = 1, NPDE
            JK = IJ + NM1
            TEM = R(J,1) + R(J,NPTL)
            RES(J,IJ) = RES(J,IJ) + (Q(J,1)*2.0/H-TEM)*SAVEL
            RES(J,JK) = (Q(J,NPTL)*2.0/H+TEM)*SAVER
  200    CONTINUE
C        TEST TO SEE IF ILLEGAL SOLUTION VALUES HAVE BEEN FOUND.
         IF (IZ(1).NE.1) THEN
            IRES = IZ(1)
            GO TO 280
         END IF
  220 CONTINUE
C**********************************************************************
C    EVALUATE THE FUNCTIONS BETA AND GAMMA AT THE BOUNDARY CONDITIONS
C**********************************************************************
C
      CALL SBNDR(T,BETA(1,1),GAMMA(1,1),U(1,1),BETA(1,3),UDOT(1,1),
     *           BETA(1,4),NPDE,.TRUE.,IV,V,VDOT,IZ(2))
      CALL SBNDR(T,BETA(1,2),GAMMA(1,2),U(1,NPTS),GAMMA(1,3),UDOT(1,
     *           NPTS),GAMMA(1,4),NPDE,.FALSE.,IV,V,VDOT,IZ(3))
C
C                             PROCESS THE BOUNDARY CONDITIONS
      DO 240 J = 1, NPDE
C        L.H.--BOUNDARY CONDITION IS PROCESSED
         RES(J,1) = MP1*(RES(J,1)*BETA(J,1)*2.0D0+GAMMA(J,1)
     *              *4.0D0/CCR(1)*SFIRST)
C        R.H.---BOUNDARY CONDITION IS PROCESSED
         RES(J,NPTS) = RES(J,NPTS)*BETA(J,2)*2.0D0 - GAMMA(J,2)
     *                 *4.0D0/CCR(1)*SAVER
  240 CONTINUE
      DO 260 IK = 2, 3
         IF (IZ(IK).NE.1) IRES = IZ(IK)
  260 CONTINUE
  280 CONTINUE
      RETURN
C-------END OF DRES----------------------------------------------------
C
      END
C***********************************************************************
C
      SUBROUTINE CHINTR(NP,XP,UP,ITYPE,U,NPTS,NPDE,NEL,NPTL,OMEGA,COEFF,
     *                  XBK,IBK,IFLAG,NV,V,VDOT,RT,T,IR)
C
C***********************************************************************
C         PARAMETER LIST
C         **************
C         XP(NP)         THE MESH POINTS AT WHICH INTERPOLATED VALUES
C                        ARE REQUIRED. THESE POINTS SUCH BE IN
C                        INCREASING ORDER.
C         UP(NPDE,NP,ITYPE)  ARRAY THAT HOLDS THE VALUES FOUND BY
C                            INTERPOLATION.
C         IF ITYPE >= 1  UP(J,K,1) HOLDS THE SOLUTION VALUE AT MESH
C                                  POINT XP(K) FOR JTH PDE
C         IF ITYPE >= 2  UP(J,K,2) HOLDS THE SPACE DERIV OF THE SOLUTION
C                                  AT POINT XP(K) FOR JTH PDE.
C         IF ITYPE >= 3  UP(J,K,3) HOLDS THE FLUX R(..) AT THE POINT
C                                  XP(K) FOR THE JTH PDE.
C
C         U(NPDE,NPTS)   ORIGINAL SOLUTION VECTOR FROM THE ODE CODE.
C
C         NPTS           THE NUMBER OF MESH POINTS USED IN COMPUTING U.
C         NPDE           THE NUMBER OF PDES IN THE PROBLEM.
C         NEL            THE NUMBER OF SPATIAL ELEMENTS IN THE MESH.
C         NPTL           THE NUMBER OF MESH POINTS PER ELEMENT.
C                        THEREFORE NPTS = NEL*(NPTL-1) + 1
C         OMEGA          MATRIX USED IN MAPPING FROM THE SOLUTION ON A
C                        SPATIAL INTERVAL TO ITS CHEBYSHEV COEFFS.
C         COEFFS         WORKSPACE USED TO HOLD THESE COEFFS.
C         XBK(IBK)       ARRAY USED TO HOLD THE BREAKPOINTS BETWEEN THE
C                        SPATIAL ELEMENTS.
C         IFLAG          ERROR FLAG SET TO 0 UNLESS EXTRAPOLATION IS
C                        TRIED AND THEN SET TO 1.
C         NV             THE SIZE OF THE ADDITIONAL ODE SYSTEM THAT IS
C                        COUPLED TO THE PDE SYSTEM.
C         V(NV)          COUPLED ODE VARIABLES
C         VDOT(NV)       AND THEIR TIME DERIVS.
C         T              THE CURRENT VALUE OF THE TIME VARIABLE.
C   NOTE --- THESE LAST FOUR VARIABLES ARE ONLY USED IF ITYPE = 3
C   ****     OTHERWISE DUMMY VARIABLES MAY BE PASSED ACROSS.
C         IR ; IRES PARAM TO TEST FOR ILLEGAL VALUES
C                THE METHOD USED IS DECOMPOSITION OF THE SOLUTION
C         PER ELEMENT INTO CHEBYSHEV COEFFICIENTS. THIS IS DONE BY
C         MATRIX MULTIPLICATION USING THE OMEGA MATRIX .  F.F.T.
C         COULD ALSO BE USED. INTERPOLATION IS USED TO PROVIDE THOSE
C         SOLUTION VALUES IN THE ELEMENT (USING CLENSHAWS ALGORITHM).
C
C***********************************************************************
C     .. Scalar Arguments ..
      DOUBLE PRECISION  T
      INTEGER           IBK, IFLAG, IR, ITYPE, NEL, NP, NPDE, NPTL,
     *                  NPTS, NV
C     .. Array Arguments ..
      DOUBLE PRECISION  COEFF(NPDE,NPTL,2), OMEGA(NPTL,NPTL),
     *                  RT(NPDE,NPTL,3), U(NPDE,NPTS), UP(NPDE,NP,*),
     *                  V(1), VDOT(1), XBK(IBK), XP(NP)
C     .. Scalars in Common ..
      DOUBLE PRECISION  TWOU
C     .. Local Scalars ..
      DOUBLE PRECISION  AL, BR, BR1, BR2, TEM, TEM1
      INTEGER           I, II, IONE, IP, IP1, IX, IY, IZ, J, K, NM1
      CHARACTER*240     ERRMSG
C     .. Local Arrays ..
      DOUBLE PRECISION  XCON(2)
C     .. External Subroutines ..
      EXTERNAL          SCHERR, SPDEFN
C     .. Intrinsic Functions ..
      INTRINSIC         MIN0
C     .. Common blocks ..
      COMMON            /SCHSZ3/TWOU
C     .. Save statement ..
      SAVE              /SCHSZ3/
C     .. Executable Statements ..
C
C  TREAT EACH ELEMENT SEPARATELY
C
      TEM = 1.0D0 + TWOU
      TEM1 = 1.0D0 - TWOU
      IONE = 1
      IP = 0
      NM1 = NPTL - 1
      IZ = 0
      DO 280 I = 1, NEL
         IP1 = I + 1
         IF (XBK(I).GT.(XBK(I+1)*TEM1-TWOU)) THEN
            ERRMSG =
     *' INTERC ROUTINE BREAKPOINT NUMBER (=I1)                  WITH VAL
     *UE (=R1) IS TOO CLOSE OR LARGER THAN BREAKPOINT NO        (=I2) WI
     *TH VALUE (=R2). INCORRECT CALL TO INTERC ASSUMED OR       WORKSPAC
     *E CORRUPTED'
            CALL SCHERR(ERRMSG,1,2,I,IP1,2,XBK(I),XBK(IP1))
            GO TO 300
         END IF
   20    IP = IP + 1
         IF (IP.EQ.(NP+1)) GO TO 300
         IF (XP(IP).LT.(XBK(I)*TEM1-TWOU)) GO TO 20
         IF (XP(IP).GT.(XBK(I+1)*TEM+TWOU)) GO TO 260
         IF (XP(IP).GT.(XBK(I+1)*TEM1-TWOU)) THEN
            IF (I.LT.NEL .AND. ITYPE.GE.2) IZ = 1
C           IZ = 1 MEANS THAT WEIGHTED AVERAGE MUST BE USED FOR
C           DERIVATIVE VALUES THAT ARE REQUESTED AT XBK(I+1)
         END IF
C        ***************************************************************
C         PROCESS A SEQUENCE OF XP(J) VALUES IN ELEMENT I
C         IX = START OF CORRECT PART OF SOLUTION VECTOR U
C         FORM THE CHEBYSHEV COEFFS IN THE ARRAY COEFF.
C        **************************************************************
         IX = NM1*(I-1)
         DO 80 K = 1, NPDE
            DO 60 J = 1, NPTL
               COEFF(K,J,1) = 0.0D0
               DO 40 II = 1, NPTL
                  COEFF(K,J,1) = COEFF(K,J,1) + OMEGA(J,II)*U(K,IX+II)
   40          CONTINUE
   60       CONTINUE
   80    CONTINUE
C        FORM THE CHEBYSHEV COEFFS OF THE SPACE DERIV.
         IF (ITYPE.GE.2) THEN
            DO 120 K = 1, NPDE
               COEFF(K,NPTL,2) = 0.0D0
               COEFF(K,NPTL-1,2) = 2.0D0*NM1*COEFF(K,NPTL,1)
               DO 100 J = 2, NM1
                  COEFF(K,NPTL-J,2) = COEFF(K,NPTL-J+2,2) + COEFF(K,
     *                                NPTL-J+1,1)*2*(NPTL-J)
  100          CONTINUE
               COEFF(K,1,2) = COEFF(K,1,2)*0.5D0
  120       CONTINUE
         END IF
         XCON(1) = 2.0D0/(XBK(I+1)-XBK(I))
         XCON(2) = -0.5D0*XCON(1)*(XBK(I+1)+XBK(I))
         IY = MIN0(2,ITYPE)
  140    DO 200 II = 1, IY
            DO 180 K = 1, NPDE
               BR1 = 0.0D0
               BR2 = 0.0D0
C              COEFF(K,NPTL) IS THE NPTL-TH  COEFF OF SOLUTION OF PDE
               AL = (XP(IP)*XCON(1)+XCON(2))*2.0D0
               BR = COEFF(K,NPTL,II)
               DO 160 J = 1, NM1
                  BR2 = COEFF(K,NPTL-J,II) + AL*BR - BR1
                  BR1 = BR
                  BR = BR2
  160          CONTINUE
               IF (II.EQ.1) THEN
                  UP(K,IP,II) = BR - BR1*AL*0.5D0
               ELSE IF (IZ.LT.2) THEN
                  UP(K,IP,II) = (BR-BR1*AL*0.5)*XCON(1)
               ELSE
                  UP(K,IP,II) = 1.D0/(XBK(I+1)-XBK(I-1))*(UP(K,IP,II)
     *                          *(XBK(I)-XBK(I-1))+(BR-BR1*AL*0.5)
     *                          *XCON(1)*(XBK(I+1)-XBK(I)))
               END IF
  180       CONTINUE
  200    CONTINUE
C        IF REQUIRED FORM THE FLUX AT THE INTERPLOATED POINTS (UNLESS
C        DERIV IS BEING FORMED BY WEIGHTED AVERAGE IN WHICH CASE WAIT
C        UNTIL THE FORMATION IS COMPLETE.
         IF (ITYPE.GE.3 .AND. IZ.NE.1) THEN
C           ZERO WORKSPACES USED IN THE FLUX CALL.
            DO 240 J = 1, 3
               DO 220 K = 1, NPDE
                  RT(K,1,J) = 0.0D0
  220          CONTINUE
  240       CONTINUE
            IR = 1
C           FORM THE FLUX AT THE INTERPOLATED POINTS.
            CALL SPDEFN(T,XP(IP),IONE,NPDE,UP(1,IP,1),UP(1,IP,2),RT(1,1,
     *                  1),RT(1,1,2),RT(1,1,3),UP(1,IP,3),NV,V,VDOT,IR)
            IF (IR.NE.1) THEN
               ERRMSG =
     *' ROUTINE SPDEFN SET IRES (=I1) WHEN CALLED FROM              THE
     *INTERPOLATION ROUTINE TO CALCULATE FLUX VALUES'
               CALL SCHERR(ERRMSG,1,1,IR,0,0,0.0D0,0.0D0)
               GO TO 300
            END IF
         END IF
         IF (IP.EQ.NP) GO TO 280
         IP = IP + 1
         IF (IZ.EQ.1) THEN
            IZ = 2
            GO TO 260
C           TO CALCULATE THE OTHER ELEMENTS CONTRIBUTION TO DERIV.
         END IF
         IF (IZ.EQ.2) IZ = 0
         IF (XP(IP).LT.(XBK(I+1)*TEM1-TWOU)) THEN
C           PROCESS ANOTHER POINT IN THIS ELEMENT
            GO TO 140
         ELSE IF (XP(IP).LT.(XBK(I+1)*TEM+TWOU)) THEN
            IF ((I+1).LT.NEL .AND. ITYPE.GE.2) IZ = 1
C           IZ = 1 MEANS THAT WEIGHTED AVERAGE MUST BE USED FOR
C           DERIVATIVE VALUES THAT ARE REQUESTED AT XBK(I+1)
            GO TO 140
         END IF
  260    IP = IP - 2
  280 CONTINUE
      RETURN
  300 IFLAG = 1
      RETURN
C---------END OF CHINTR--------------------------------------------
C
      END
      SUBROUTINE INTERC(XP,UP,NP,U,NEQ,NPDE,IFLAG,ITYPE,WK,IWK)
C********************************************************************
C
C        SPACE INTERPOLATION ROUTINE FOR POST-PROCESSING OF SOLUTION
C        PRODUCED BY DASSL.
C        THIS ROUTINES PROVIDES VALUES OF THE SOLUTION AND POSSIBLY THE
C        FIRST DERIV IN SPACE AND THE FLUX ON THE MESH XP(NP).
C
C        PARAMETERS
C       --------------
C        NPDE     ON ENTRY MUST CONTAIN NO OF PARABOLIC EQUATIONS
C        NPTS     ON ENTRY MUST CONTAIN THE NUMBER OF SPATIAL
C                 MESH POINTS USED IN TIME INTEGRATION.
C        NP       ON ENTRY MUST CONTAIN THE NUMBER OF SPATIAL
C                 INTERPOLATION POINTS
C        XP(NP)   ARRAY WHICH ON ENTRY
C                 CONTAINS THE SPATIAL INTERPOLATION POINTS
C                 WE ASSUME THAT
C                    XP(I) <  XP(I+1)  ,  I = 1,...,NP-1
C        UP(NPDE,NP,ITYPE)  EMPTY ARRAY FOR THE INTERPOLATED VALUES AT
C                           THE CURRENT TIME LEVEL. THE VALUES OF THIS
C                           ARRAY ON EXIT DEPEND ON THE PARAMETER ITYPE.
C        U(NPDE,NPTS) THE CURRENT SOLUTION VECTOR COMPUTED BY THE ODE
C                  TIME INTEGRATOR MUST BE SUPPLIED IN THIS VECTOR.
C        IFLAG          ERROR FLAG       = 0 ON SUCCESSFUL RETURN
C                                        = 1 IF EXTRAPOLATION TRIED.
C                                        = 2 IF WORKSPACE NOT INITIAL
C                                               ISED ON ENTRY BY INICHB.
C                                        = 3 ILLEGAL VALUE OF ITYPE.
C        ITYPE = 1  ONLY THE SOLUTION IS OUTPUT IN THE ARRAY UP
C                   UP(J,K,1) HOLDS U(XP(K),T) FOR PDE J
C                2  AS FOR 1 BUT THE FIRST DERIV IS ALSO OUTPUT.
C                   UP(J,K,2) HOLDS D/DX U(XP(K),T).
C
C        WK(IWK) THE WORKSPACE USED BY THE CHEBYSHEV METHOD. THIS
C                MUST BE THE WORKSPACE INITIALISED BY INICHB.
C**********************************************************************
C     .. Scalar Arguments ..
      INTEGER           IFLAG, ITYPE, IWK, NEQ, NP, NPDE
C     .. Array Arguments ..
      DOUBLE PRECISION  U(NEQ), UP(NPDE,NP,ITYPE), WK(IWK), XP(NP)
C     .. Scalars in Common ..
      DOUBLE PRECISION  TWOU
      INTEGER           I10, I11, I19, I5, I9, MM, NEL, NNPDE, NNPTS,
     *                  NPTL, NV, NVST, NXI
      CHARACTER*6       PDCODE
C     .. Arrays in Common ..
      INTEGER           IA(3), IB(3), IC(2), ID(9)
C     .. Local Scalars ..
      DOUBLE PRECISION  TEMP
      INTEGER           I, IBK, J, K, NPTS
      CHARACTER*240     ERRMSG
C     .. External Subroutines ..
      EXTERNAL          INTRCH, SCHERR
C     .. Intrinsic Functions ..
      INTRINSIC         DABS
C     .. Common blocks ..
      COMMON            /DISCHK/PDCODE
      COMMON            /SCHSZ/IA, I5, IB, I9, I10, IC, I11, ID, I19
      COMMON            /SCHSZ1/NEL, NPTL, NNPDE, NNPTS, MM, NV, NXI,
     *                  NVST
      COMMON            /SCHSZ3/TWOU
C     .. Save statement ..
      SAVE              /SCHSZ1/, /SCHSZ/, /DISCHK/, /SCHSZ3/
C     .. Executable Statements ..
      IF (PDCODE.NE.'C0CHEB') THEN
         IFLAG = 1
         GO TO 80
      END IF
      IFLAG = 0
      IBK   = NEL + 1
      IF (ITYPE.NE.1 .AND. ITYPE.NE.2) THEN
         ERRMSG =
     *' ILLEGAL VALUE OF ITYPE IN CALL TO SUBROUTINE INTERC
     *  THE VALUE IS (=I1), BUT SHOULD BE 1 OR 2 '
         CALL SCHERR(ERRMSG,1,1,ITYPE,0,0,0.0D0,0.0D0)
         IFLAG = 3
         GO TO 80
      END IF
C
C   TEST THE INTERPOLATION POINTS XP(NP) TO ENSURE THAT THEY ARE IN
C   INCREASING ORDER AND THAT IF ITYPE = 2 (DERIVATIVES REQUIRED) THE
C   POINTS DO NOT CONFLICT WITH THE BREAK-POINTS.
C
      DO 20 I = 2, NP
         TEMP = XP(I) - XP(I-1)
         IF (TEMP.LE.TWOU) THEN
            ERRMSG =
     *' INTERC ROUTINE CALLED WITH INTERP.POINTS NOT            IN STRIC
     *TLY INCREASING ORDER I.E. COMPONENT NO (=I1)              WITH VAL
     *UE (=R1) IS GREATER THAN COMPONENT( =I2)                  WITH VAL
     *UE (=R2).'
            CALL SCHERR(ERRMSG,1,2,J,I,2,XP(J),XP(I))
         END IF
   20 CONTINUE
      IF (ITYPE.GE.2 .AND. IBK.GT.2) THEN
         DO 60 I = 1, NP
            DO 40 J = 2, NEL
               TEMP = DABS(XP(I)-WK(I5-1+J))
               IF (TEMP.LE.TWOU) THEN
                  K = I5 + J - 1
                  ERRMSG =
     *' INTERC ROUTINE CALLED WITH ITYPE = 2                    AND INTE
     *RP. POINTS EQUAL TO BREAK-POINTS I.E.                     COMPONEN
     *T NO (=I1) WITH VALUE (=R1)                               IS CLOSE
     * TO BREAK POINT(=I2) WITH VALUE (=R2).'
                  CALL SCHERR(ERRMSG,1,2,I,J,2,XP(I),WK(K))
               END IF
   40       CONTINUE
   60    CONTINUE
      END IF
C
C    CALL THE INTERPOLATION ROUTINE.
C
      NPTS = NNPTS
      CALL INTRCH(NP,XP,UP,ITYPE,U,NPTS,NPDE,NEL,NPTL,WK,WK(I10),WK(I5),
     *            IBK,IFLAG)
   80 CONTINUE
      RETURN
      END
C***********************************************************************
C
      SUBROUTINE INTRCH(NP,XP,UP,ITYPE,U,NPTS,NPDE,NEL,NPTL,OMEGA,COEFF,
     *                  XBK,IBK,IFLAG)
C
C***********************************************************************
C         PARAMETER LIST
C         **************
C         XP(NP)         THE MESH POINTS AT WHICH INTERPOLATED VALUES
C                        ARE REQUIRED. THESE POINTS SUCH BE IN
C                        INCREASING ORDER.
C         UP(NPDE,NP,ITYPE)  ARRAY THAT HOLDS THE VALUES FOUND BY
C                            INTERPOLATION.
C         IF ITYPE >= 1  UP(J,K,1) HOLDS THE SOLUTION VALUE AT MESH
C                                  POINT XP(K) FOR JTH PDE
C         IF ITYPE >= 2  UP(J,K,2) HOLDS THE SPACE DERIV OF THE SOLUTION
C                                  AT POINT XP(K) FOR JTH PDE.
C
C         U(1..NEQN)     ORIGINAL SOLUTION VECTOR FROM THE ODE CODE.
C
C         NPTS           THE NUMBER OF MESH POINTS USED IN COMPUTING U.
C         NPDE           THE NUMBER OF PDES IN THE PROBLEM.
C         NEL            THE NUMBER OF SPATIAL ELEMENTS IN THE MESH.
C         NPTL           THE NUMBER OF MESH POINTS PER ELEMENT.
C                        THEREFORE NPTS = NEL*(NPTL-1) + 1
C         OMEGA          MATRIX USED IN MAPPING FROM THE SOLUTION ON A
C                        SPATIAL INTERVAL TO ITS CHEBYSHEV COEFFS.
C         COEFFS         WORKSPACE USED TO HOLD THESE COEFFS.
C         XBK(IBK)       ARRAY USED TO HOLD THE BREAKPOINTS BETWEEN THE
C                        SPATIAL ELEMENTS.
C         IFLAG          ERROR FLAG SET TO 0 UNLESS EXTRAPOLATION IS
C                        TRIED AND THEN SET TO 1.
C
C                THE METHOD USED IS DECOMPOSITION OF THE SOLUTION
C         PER ELEMENT INTO CHEBYSHEV COEFFICIENTS. THIS IS DONE BY
C         MATRIX MULTIPLICATION USING THE OMEGA MATRIX .  F.F.T.
C         COULD ALSO BE USED. INTERPOLATION IS USED TO PROVIDE THOSE
C         SOLUTION VALUES IN THE ELEMENT (USING CLENSHAWS ALGORITHM).
C
C***********************************************************************
C     .. Scalar Arguments ..
      INTEGER           IBK, IFLAG, ITYPE, NEL, NP, NPDE, NPTL, NPTS
C     .. Array Arguments ..
      DOUBLE PRECISION  COEFF(NPDE,NPTL,2), OMEGA(NPTL,NPTL),
     *                  U(NPDE,NPTS), UP(NPDE,NP,1), XBK(IBK), XP(NP)
C     .. Scalars in Common ..
      DOUBLE PRECISION  TWOU
C     .. Local Scalars ..
      DOUBLE PRECISION  AL, BR, BR1, BR2, CU, TEM, TEM1
      INTEGER           I, II, IP, IP1, IX, IY, IZ, J, K, NM1
      CHARACTER*240     ERRMSG
C     .. Local Arrays ..
      DOUBLE PRECISION  XCON(2)
C     .. External Subroutines ..
      EXTERNAL          SCHERR
C     .. Intrinsic Functions ..
      INTRINSIC         MIN0
C     .. Common blocks ..
      COMMON            /SCHSZ3/TWOU
C     .. Save statement ..
      SAVE              /SCHSZ3/
C     .. Executable Statements ..
C
C  TREAT EACH ELEMENT SEPARATELY
C
      CU = TWOU
      TEM1 = 1 - CU
      TEM = 1 + CU
      IP = 0
      NM1 = NPTL - 1
      IZ = 0
      DO 240 I = 1, NEL
         IP1 = I + 1
         IF (XBK(I).GT.(XBK(I+1)*TEM1-CU)) THEN
            ERRMSG =
     *' INTERC ROUTINE BREAKPOINT NUMBER (=I1)                  WITH VAL
     *UE (=R1) IS TOO CLOSE OR LARGER THAN BREAKPOINT NO        (=I2) WI
     *TH VALUE (=R2). INCORRECT CALL TO INTERC ASSUMED OR       WORKSPAC
     *E CORRUPTED'
            CALL SCHERR(ERRMSG,1,2,I,IP1,2,XBK(I),XBK(IP1))
            GO TO 260
         END IF
   20    IP = IP + 1
         IF (IP.EQ.(NP+1)) GO TO 260
         IF (XP(IP).LT.(XBK(I)*TEM1-CU)) GO TO 20
         IF (XP(IP).GT.(XBK(I+1)*TEM+CU)) THEN
             IP = IP - 1
             GOTO 240
         END IF
         IF (XP(IP).GE.(XBK(I+1)*TEM1-CU)) THEN
            IF (I.LT.NEL .AND. ITYPE.GE.2) IZ = 1
C           IZ = 1 MEANS THAT WEIGHTED AVERAGE MUST BE USED FOR
C           DERIVATIVE VALUES THAT ARE REQUESTED AT XBK(I+1)
         END IF
C        ***************************************************************
C         PROCESS A SEQUENCE OF XP(J) VALUES IN ELEMENT I
C         IX = START OF CORRECT PART OF SOLUTION VECTOR U
C         FORM THE CHEBYSHEV COEFFS IN THE ARRAY COEFF.
C        ***************************************************************
         IX = NM1*(I-1)
         DO 80 K = 1, NPDE
            DO 60 J = 1, NPTL
               COEFF(K,J,1) = 0.0D0
               DO 40 II = 1, NPTL
                  COEFF(K,J,1) = COEFF(K,J,1) + OMEGA(J,II)*U(K,IX+II)
   40          CONTINUE
   60       CONTINUE
   80    CONTINUE
C        FORM THE CHEBYSHEV COEFFS OF THE SPACE DERIV.
         IF (ITYPE.GE.2) THEN
            DO 120 K = 1, NPDE
               COEFF(K,NPTL,2) = 0.0D0
               COEFF(K,NPTL-1,2) = 2.0D0*NM1*COEFF(K,NPTL,1)
               DO 100 J = 2, NM1
                  COEFF(K,NPTL-J,2) = COEFF(K,NPTL-J+2,2) + COEFF(K,
     *                                NPTL-J+1,1)*2*(NPTL-J)
  100          CONTINUE
               COEFF(K,1,2) = COEFF(K,1,2)*0.5D0
  120       CONTINUE
         END IF
         XCON(1) = 2.0D0/(XBK(I+1)-XBK(I))
         XCON(2) = -0.5D0*XCON(1)*(XBK(I+1)+XBK(I))
         IY = MIN0(2,ITYPE)
  140    DO 200 II = 1, IY
            DO 180 K = 1, NPDE
               BR1 = 0.0D0
               BR2 = 0.0D0
C               COEFF(K,NPTL) IS THE NPTL-TH  COEFF OF SOLUTION OF PDE K
               AL = (XP(IP)*XCON(1)+XCON(2))*2.0D0
               BR = COEFF(K,NPTL,II)
               DO 160 J = 1, NM1
                  BR2 = COEFF(K,NPTL-J,II) + AL*BR - BR1
                  BR1 = BR
                  BR = BR2
  160          CONTINUE
               IF (II.EQ.1) THEN
                  UP(K,IP,II) = BR - BR1*AL*0.5D0
               ELSE IF (IZ.LT.2) THEN
                  UP(K,IP,II) = (BR-BR1*AL*0.5)*XCON(1)
               ELSE
                  UP(K,IP,II) = 1.D0/(XBK(I+1)-XBK(I-1))*(UP(K,IP,II)
     *                          *(XBK(I)-XBK(I-1))+(BR-BR1*AL*0.5)
     *                          *XCON(1)*(XBK(I+1)-XBK(I)))
               END IF
  180       CONTINUE
  200    CONTINUE
         IF (IP.EQ.NP) GO TO 240
         IP = IP + 1
         IF (IZ.EQ.1) THEN
            IZ = 2
            GO TO 220
C           TO CALCULATE THE OTHER ELEMENTS CONTRIBUTION TO DERIV.
         END IF
         IF (IZ.EQ.2) IZ = 0
         IF (XP(IP).LE.(XBK(I+1)*TEM1-CU)) THEN
            GO TO 140
         ELSE IF (XP(IP).LE.(XBK(I+1)*TEM+CU)) THEN
            IF (I.LT.NEL .AND. ITYPE.GE.2) IZ = 1
C           IZ = 1 MEANS THAT WEIGHTED AVERAGE MUST BE USED FOR
C           DERIVATIVE VALUES THAT ARE REQUESTED AT XBK(I+1)
            GO TO 140
         END IF
  220    IP = IP - 2
  240 CONTINUE
      RETURN
  260 IFLAG = 1
      RETURN
C---------END OF INTRCH-------------------------------------------
C
      END




